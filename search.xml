<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Kuangbin-简单搜索</title>
    <url>/2021/07/20/Kuangbin-%E7%AE%80%E5%8D%95%E6%90%9C%E7%B4%A2/</url>
    <content><![CDATA[<h1 id="简单搜索"><a href="#简单搜索" class="headerlink" title="简单搜索"></a>简单搜索</h1><p>[poj1321](##<a href="http://poj.org/problem?id=1321">POJ1321 – 棋盘问题 </a>)</p>
<h2 id="POJ1321-–-棋盘问题"><a href="#POJ1321-–-棋盘问题" class="headerlink" title="POJ1321 – 棋盘问题"></a><a href="http://poj.org/problem?id=1321">POJ1321 – 棋盘问题</a></h2><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>变版的八皇后问题，只不过棋盘不再规则只能在某些格子放棋子而已，思路不变。先假设前面k行已经摆好且没有相互矛盾，那在第k+1行就有摆和不摆两种选择，如果摆，那又有摆在哪一列的选择，用一个col数组记录前面哪些列已经用过了，如果col[x]的状态表示没有用过，那[k+1][x]就是一个可行的位置，把col[x]标记一下，然后继续向下一行探索。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">bool</span> col[<span class="number">10</span>];<span class="comment">//存哪些列用过来了,false表示没用过</span></span><br><span class="line"><span class="keyword">char</span> grid[<span class="number">10</span>][<span class="number">10</span>];<span class="comment">//存图</span></span><br><span class="line"><span class="keyword">int</span> n, k, ans;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> line, <span class="keyword">int</span> num)</span> </span>&#123;<span class="comment">//line表示现在在第几行，num表示前面填好了几个</span></span><br><span class="line">	<span class="keyword">if</span> (line==n||num == k) &#123;<span class="comment">//行号最多n-1,到n肯定不行了</span></span><br><span class="line">		<span class="keyword">if</span> (num == k)<span class="comment">//如果已经填好k个，总方案数加1</span></span><br><span class="line">			ans++;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="comment">//在该行填，将改行的每一列遍历一遍，看看哪些列可以填</span></span><br><span class="line">		<span class="keyword">if</span> (!col[i] &amp;&amp; grid[line][i] == <span class="string">&#x27;#&#x27;</span>) &#123;</span><br><span class="line">			col[i] = <span class="literal">true</span>;</span><br><span class="line">			<span class="built_in">dfs</span>(line + <span class="number">1</span>, num + <span class="number">1</span>);</span><br><span class="line">			col[i] = <span class="literal">false</span>;<span class="comment">//j</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">    <span class="comment">//不在改行填，所以num没有加1</span></span><br><span class="line">	<span class="built_in">dfs</span>(line + <span class="number">1</span>, num);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">while</span> (cin &gt;&gt; n &gt;&gt; k) &#123;</span><br><span class="line">		<span class="keyword">if</span> (n == k &amp;&amp; n == <span class="number">-1</span>)</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="built_in">memset</span>(col, <span class="literal">false</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(col));<span class="comment">//初始化</span></span><br><span class="line">		ans = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">			cin &gt;&gt; grid[i];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">dfs</span>(<span class="number">0</span>, <span class="number">0</span>);<span class="comment">//从第0行开始，已经填好0个</span></span><br><span class="line">		cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="POJ3278-3278-–-Catch-That-Cow-poj-org"><a href="#POJ3278-3278-–-Catch-That-Cow-poj-org" class="headerlink" title="[POJ3278](3278 – Catch That Cow (poj.org))"></a>[POJ3278](<a href="http://poj.org/problem?id=3278">3278 – Catch That Cow (poj.org)</a>)</h2><h3 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a>题解</h3><p>该题注意剪枝，不让会RE（虽然我用的map），剪枝不可将x+1&gt;K和x*2&gt;k的情况剪掉，例如100-&gt;199</p>
<p>另外由于时间卡得比较紧，数量比较大所以不能用map，用map会TE</p>
<h2 id="poj3279"><a href="#poj3279" class="headerlink" title="poj3279"></a><a href="http://poj.org/problem?id=3279">poj3279</a></h2><p>题意大概说的是给定一个m*n的01矩阵，每次去翻一个位置周围四个方向的位置都会翻转，问能不能翻到全是0，能的话输出字典序最小的翻法</p>
<h3 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a>题解</h3><p>这是遇到的第一个枚举题，二进制枚举，首先确定的是每个位置只有翻和不翻两种情况，翻两次等于没翻，翻奇数次等于一次。如果去考察每一个位置的翻的情况就会有2^mn^次结果，显然时间超限，观察（看博客）易得出规律——==假设第一行的状态确定（就是第一行哪些位置翻不翻确定，确定之后会得到第一行确定的状态，哪些位置是0哪些是1），从第二行开始扫描，如果发现该位置上头上的位置为1那该位置一定要翻，因为头上的位置上左右都确定了==，以此扫描完整个数组，最后再对最后一行做一个检查，如果有1则不行，因为现在只能由下一行来翻转该位置，但没有下一行。</p>
<blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">int</span> maze[maxn][maxn];</span><br><span class="line"><span class="keyword">int</span> grid[maxn][maxn];</span><br><span class="line"><span class="keyword">int</span> ans[maxn][maxn];</span><br><span class="line"><span class="keyword">int</span> dir[<span class="number">5</span>][<span class="number">2</span>] = &#123; &#123;<span class="number">0</span>,<span class="number">0</span>&#125;,&#123;<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,<span class="number">1</span>&#125;,&#123;<span class="number">-1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,<span class="number">-1</span>&#125; &#125;;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">legal</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> (x &gt;= <span class="number">0</span> &amp;&amp; x &lt; n&amp;&amp; y &gt;= <span class="number">0</span> &amp;&amp; y &lt; m);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">flip</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">	ans[x][y] = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">int</span> nx, ny;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">		nx = x + dir[i][<span class="number">0</span>];</span><br><span class="line">		ny = y + dir[i][<span class="number">1</span>];</span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">legal</span>(nx, ny)) &#123;</span><br><span class="line">			grid[nx][ny] ^= <span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; j++) &#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%d%c&quot;</span>, ans[i][j], <span class="string">&quot; \n&quot;</span>[j == (m - <span class="number">1</span>)]);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; j++) &#123;</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;maze[i][j]);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">int</span> end = <span class="number">1</span> &lt;&lt; m;</span><br><span class="line">	<span class="keyword">int</span> bsk;</span><br><span class="line">	<span class="keyword">bool</span> ok = <span class="literal">true</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; end; i++) &#123;</span><br><span class="line">		ok = <span class="literal">true</span>;</span><br><span class="line">		bsk = i;</span><br><span class="line">		<span class="built_in">memcpy</span>(grid, maze, <span class="built_in"><span class="keyword">sizeof</span></span>(maze));</span><br><span class="line">		<span class="built_in">memset</span>(ans, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(ans));</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; m; k++) &#123;</span><br><span class="line">			<span class="keyword">if</span> (bsk &amp; <span class="number">1</span>)</span><br><span class="line">				<span class="built_in">flip</span>(<span class="number">0</span>, k);</span><br><span class="line">			bsk &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; n; j++) &#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; m; k++) &#123;</span><br><span class="line">				<span class="keyword">if</span> (grid[j - <span class="number">1</span>][k])</span><br><span class="line">					<span class="built_in">flip</span>(j, k);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>, j = n - <span class="number">1</span>; k &lt; m; k++) &#123;</span><br><span class="line">			<span class="keyword">if</span> (grid[j][k]) &#123;</span><br><span class="line">				ok = <span class="literal">false</span>;</span><br><span class="line">				<span class="keyword">continue</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (ok) &#123;</span><br><span class="line">			<span class="built_in">solve</span>();</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (!ok)</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;IMPOSSIBLE\n&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</blockquote>
<h2 id="POJ1426-–-Find-The-Multiple"><a href="#POJ1426-–-Find-The-Multiple" class="headerlink" title="POJ1426 – Find The Multiple "></a><a href="http://poj.org/problem?id=1426">POJ1426 – Find The Multiple </a></h2><p>题意大概是给一个数字n,找出一个n的十进制倍数m，m只能由01组成</p>
<h3 id="题解-3"><a href="#题解-3" class="headerlink" title="题解"></a>题解</h3><p>虽然这道题说m不超过100位，但用unsigned long long过了，要是完全按照题意的话就还要处理大数问题，看其它文章好像也没有很好的可以解决，就直接当unsigned long long 过了</p>
<p>bfs和dfs都可以，dfs注意判断不要溢出,当然由于n比较小可以先得出200个结果打表然后再过，因为可能搜索会超时，时间卡得较紧</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bfs</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	queue&lt;ull&gt; que;</span><br><span class="line">	que.<span class="built_in">push</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span> (!que.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">		ull tmp = que.<span class="built_in">front</span>();</span><br><span class="line">		que.<span class="built_in">pop</span>();</span><br><span class="line">		<span class="keyword">if</span> (tmp % n == <span class="number">0</span>) &#123;</span><br><span class="line">			cout &lt;&lt; tmp &lt;&lt; endl;</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		que.<span class="built_in">push</span>(tmp * <span class="number">10</span>);</span><br><span class="line">		que.<span class="built_in">push</span>(tmp * <span class="number">10</span> + <span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">while</span> (cin &gt;&gt; n&amp;&amp;n) &#123;</span><br><span class="line">		<span class="built_in">bfs</span>();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="hdu2612"><a href="#hdu2612" class="headerlink" title="hdu2612"></a><a href="https://acm.dingbacode.com/showproblem.php?pid=2612">hdu2612</a></h2><p>题意为求两个人要到同一个@需要的最少步数乘以11.</p>
<h3 id="题解-4"><a href="#题解-4" class="headerlink" title="题解"></a>题解</h3><p>两边bfs之后将每次每一个@的步数相加，最后找出最小的那个@即可，但是要注意可能有些@是两个人都到不了的，其步数一直为0所以最后需要特殊判断一下，我legal判断x&lt;n写成x&lt;m了，RE了好几发━┳━　━┳━</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">vector&lt;string&gt; maze;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">	<span class="keyword">int</span> x, y, v;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> _x, <span class="keyword">int</span> _y)</span> </span>&#123;</span><br><span class="line">		x = _x;</span><br><span class="line">		y = _y;</span><br><span class="line">		v = <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">node</span>(<span class="keyword">int</span> _x, <span class="keyword">int</span> _y) &#123;</span><br><span class="line">		x = _x;</span><br><span class="line">		y = _y;</span><br><span class="line">		v = <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">node</span>() &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line">vector&lt;node&gt; End;</span><br><span class="line">node yifenfi, mercki;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">int</span> dir[<span class="number">4</span>][<span class="number">2</span>] = &#123; &#123;<span class="number">-1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,<span class="number">-1</span>&#125;,&#123;<span class="number">0</span>,<span class="number">1</span>&#125; &#125;;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">legal</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, vector&lt;string&gt;&amp; grid)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> (x &gt;= <span class="number">0</span> &amp;&amp; x &lt; n&amp;&amp; y &gt;= <span class="number">0</span> &amp;&amp; y &lt; m&amp;&amp; grid[x][y] != <span class="string">&#x27;#&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bfs</span><span class="params">(node&amp; start)</span> </span>&#123;</span><br><span class="line">	<span class="function">vector&lt;string&gt; <span class="title">grid</span><span class="params">(maze.begin(), maze.end())</span></span>;</span><br><span class="line">	<span class="keyword">int</span> step[<span class="number">205</span>][<span class="number">205</span>];</span><br><span class="line">	<span class="built_in">memset</span>(step, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(step));</span><br><span class="line">	queue&lt;node&gt; que;</span><br><span class="line">	grid[start.x][start.y] = <span class="string">&#x27;#&#x27;</span>;</span><br><span class="line">	que.<span class="built_in">push</span>(start);</span><br><span class="line">	<span class="keyword">while</span> (!que.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">		node tmp = que.<span class="built_in">front</span>();</span><br><span class="line">		que.<span class="built_in">pop</span>();</span><br><span class="line">		<span class="keyword">int</span> nx, ny;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">			nx = tmp.x + dir[i][<span class="number">0</span>];</span><br><span class="line">			ny = tmp.y + dir[i][<span class="number">1</span>];</span><br><span class="line">			<span class="keyword">if</span> (<span class="built_in">legal</span>(nx, ny, grid)) &#123;</span><br><span class="line">				step[nx][ny] = step[tmp.x][tmp.y] + <span class="number">1</span>;</span><br><span class="line">				grid[nx][ny] = <span class="string">&#x27;#&#x27;</span>;</span><br><span class="line">				que.<span class="built_in">push</span>(<span class="built_in">node</span>(nx, ny));</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">auto</span>&amp; i : End) &#123;</span><br><span class="line">		i.v += step[i.x][i.y];</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span> (cin &gt;&gt; n &gt;&gt; m&amp;&amp;n&gt;=<span class="number">2</span>&amp;&amp;m&gt;=<span class="number">2</span>) &#123;</span><br><span class="line">		string s;</span><br><span class="line">		maze.<span class="built_in">clear</span>();</span><br><span class="line">		End.<span class="built_in">clear</span>();</span><br><span class="line">		yifenfi.x = yifenfi.y = <span class="number">0</span>;</span><br><span class="line">		mercki.x = mercki.y = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">			cin &gt;&gt; s;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; j++) &#123;</span><br><span class="line">				<span class="keyword">if</span> (s[j] == <span class="string">&#x27;@&#x27;</span>) &#123;</span><br><span class="line">					End.<span class="built_in">push_back</span>(<span class="built_in">node</span>(i, j));</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">else</span> <span class="keyword">if</span> (s[j] == <span class="string">&#x27;Y&#x27;</span>) &#123;</span><br><span class="line">					yifenfi.<span class="built_in">init</span>(i, j);</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">else</span> <span class="keyword">if</span> (s[j] == <span class="string">&#x27;M&#x27;</span>)</span><br><span class="line">					mercki.<span class="built_in">init</span>(i, j);</span><br><span class="line">			&#125;</span><br><span class="line">			maze.<span class="built_in">push_back</span>(s);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">bfs</span>(yifenfi);</span><br><span class="line">		<span class="built_in">bfs</span>(mercki);</span><br><span class="line">		<span class="keyword">int</span> Min = <span class="number">10000</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">auto</span> i : End) &#123;</span><br><span class="line">			<span class="keyword">if</span> (Min &gt; i.v&amp;&amp;i.v!=<span class="number">0</span>) &#123;</span><br><span class="line">				Min = i.v;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		cout &lt;&lt; Min * <span class="number">11</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="hdu1401"><a href="#hdu1401" class="headerlink" title="hdu1401 "></a><a href="https://acm.dingbacode.com/showproblem.php?pid=1401">hdu1401 </a></h2><p>题意为给定一个8 $\times$ 8的棋盘，给定四个棋子的起始坐标和终止坐标，问是否能在8步以内从起始状态到终点状态</p>
<h3 id="题解-5"><a href="#题解-5" class="headerlink" title="题解"></a>题解</h3><p>第一道双向广搜题，棋盘布局问题的一个重点是怎么查重，这就需要将每一步之后的棋盘状态给表示出来，这道题给的是一个8 $\times$ 8的棋盘，一共64个位置，因此整个棋盘的状态可以用一个long long数据来存储，64个bit位上分别可以对应棋盘上一个点是否摆放了棋子，再者还需要存储该状态是第几步得到，为了方便快速取出棋子，需要一个二维数组来存放四颗棋子的状态。中间再使用map来标记哪些状态已经到达，该map能记录每个状态需要多少步到达。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">maze</span> &#123;</span></span><br><span class="line">	<span class="keyword">int</span> chess[<span class="number">4</span>][<span class="number">2</span>];<span class="comment">//棋子状态</span></span><br><span class="line">	ull hash;<span class="comment">//每个状态独有的hash值</span></span><br><span class="line">	<span class="keyword">bool</span> grid[<span class="number">8</span>][<span class="number">8</span>];<span class="comment">//棋盘状态</span></span><br><span class="line">&#125;Front, Tail;<span class="comment">//定义开始棋盘与终点棋盘</span></span><br><span class="line"><span class="keyword">int</span> dir1[<span class="number">4</span>][<span class="number">2</span>] = &#123; &#123;<span class="number">-1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,<span class="number">1</span>&#125;,&#123;<span class="number">0</span>,<span class="number">-1</span>&#125; &#125;;</span><br><span class="line"><span class="keyword">int</span> dir2[<span class="number">4</span>][<span class="number">2</span>] = &#123; &#123;<span class="number">-2</span>,<span class="number">0</span>&#125;,&#123;<span class="number">2</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,<span class="number">2</span>&#125;,&#123;<span class="number">0</span>,<span class="number">-2</span>&#125; &#125;;<span class="comment">//遇到旁边有棋子的移动步数</span></span><br><span class="line"></span><br><span class="line"><span class="function">ull <span class="title">ToHash</span><span class="params">(maze&amp; m)</span> </span>&#123;</span><br><span class="line">	ull re = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//将棋盘上每一个点的状态对应到long long 上每一个位</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">8</span>; j++) &#123;</span><br><span class="line">			re = re &lt;&lt; <span class="number">1</span> | m.grid[i][j];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> re;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">solve</span><span class="params">(queue&lt;maze&gt;&amp; que, unordered_map&lt;ull, <span class="keyword">int</span>&gt;&amp; mp1, unordered_map&lt;ull, <span class="keyword">int</span>&gt;&amp; mp2)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//该函数相当于while循环当中的一次que.front()...que.push()...</span></span><br><span class="line">	maze tmp = que.<span class="built_in">front</span>();</span><br><span class="line">	que.<span class="built_in">pop</span>();</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">        <span class="comment">//第一重遍历，遍历四颗棋子</span></span><br><span class="line">		<span class="keyword">int</span> x = tmp.chess[i][<span class="number">0</span>], y = tmp.chess[i][<span class="number">1</span>];</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++) &#123;</span><br><span class="line">            <span class="comment">//第二重遍历，遍历四个方向</span></span><br><span class="line">			<span class="keyword">int</span> nx = x + dir1[j][<span class="number">0</span>];</span><br><span class="line">			<span class="keyword">int</span> ny = y + dir1[j][<span class="number">1</span>];</span><br><span class="line">			<span class="keyword">if</span> (nx &gt;= <span class="number">0</span> &amp;&amp; nx &lt; <span class="number">8</span> &amp;&amp; ny &gt;= <span class="number">0</span> &amp;&amp; ny &lt; <span class="number">8</span> &amp;&amp; tmp.grid[nx][ny] == <span class="literal">false</span>) &#123;<span class="comment">//先尝试移动一步</span></span><br><span class="line">				maze next = tmp;</span><br><span class="line">				next.grid[nx][ny] = <span class="literal">true</span>;</span><br><span class="line">				next.grid[x][y] = <span class="literal">false</span>;<span class="comment">//下一个状态里面,(x,y)已经变成了false，不用担心走回头路，因为当前棋盘的hash已经记录在map里面了</span></span><br><span class="line">				next.hash = <span class="built_in">ToHash</span>(next);</span><br><span class="line">				next.chess[i][<span class="number">0</span>] = nx, next.chess[i][<span class="number">1</span>] = ny;</span><br><span class="line">				<span class="keyword">if</span> (!mp1.<span class="built_in">count</span>(next.hash)) &#123;<span class="comment">//如果变化后是以前没有的状态</span></span><br><span class="line">					mp1[next.hash] = mp1[tmp.hash] + <span class="number">1</span>;</span><br><span class="line">					que.<span class="built_in">push</span>(next);</span><br><span class="line">					<span class="keyword">if</span> (mp2.<span class="built_in">count</span>(next.hash))<span class="comment">//如果变化后与终点变过来的某一状态相同，则已经找到答案</span></span><br><span class="line">						<span class="keyword">return</span> mp1[next.hash] + mp2[next.hash];</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">if</span> (nx &gt;= <span class="number">0</span> &amp;&amp; nx &lt; <span class="number">8</span> &amp;&amp; ny &gt;= <span class="number">0</span> &amp;&amp; ny &lt; <span class="number">8</span> &amp;&amp; tmp.grid[nx][ny] == <span class="literal">true</span>) &#123;<span class="comment">//走一步遇到了棋子</span></span><br><span class="line">				 nx = x + dir2[j][<span class="number">0</span>];</span><br><span class="line">				 ny = y + dir2[j][<span class="number">1</span>];</span><br><span class="line">				 <span class="keyword">if</span> (nx &gt;= <span class="number">0</span> &amp;&amp; nx &lt; <span class="number">8</span> &amp;&amp; ny &gt;= <span class="number">0</span> &amp;&amp; ny &lt; <span class="number">8</span> &amp;&amp; tmp.grid[nx][ny] == <span class="literal">false</span>) &#123;<span class="comment">//尝试走两步，后面代码同上</span></span><br><span class="line">					 maze next = tmp;</span><br><span class="line">					 next.grid[nx][ny] = <span class="literal">true</span>;</span><br><span class="line">					 next.grid[x][y] = <span class="literal">false</span>;</span><br><span class="line">					 next.hash = <span class="built_in">ToHash</span>(next);</span><br><span class="line">					 next.chess[i][<span class="number">0</span>] = nx, next.chess[i][<span class="number">1</span>] = ny;</span><br><span class="line">					 <span class="keyword">if</span> (!mp1.<span class="built_in">count</span>(next.hash)) &#123;</span><br><span class="line">						 mp1[next.hash] = mp1[tmp.hash] + <span class="number">1</span>;</span><br><span class="line">						 que.<span class="built_in">push</span>(next);</span><br><span class="line">						 <span class="keyword">if</span> (mp2.<span class="built_in">count</span>(next.hash))</span><br><span class="line">							 <span class="keyword">return</span> mp1[next.hash] + mp2[next.hash];</span><br><span class="line">					 &#125;</span><br><span class="line">				 &#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">-1</span>;<span class="comment">//四颗棋子遍历完发现都没有return，返回失败标记</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bfs</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	queue&lt;maze&gt; que1, que2;</span><br><span class="line">	que1.<span class="built_in">push</span>(Front);</span><br><span class="line">	que2.<span class="built_in">push</span>(Tail);</span><br><span class="line">	unordered_map&lt;ull, <span class="keyword">int</span>&gt; mp1, mp2;</span><br><span class="line">	mp1[Front.hash] = <span class="number">0</span>;</span><br><span class="line">	mp2[Tail.hash] = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//两个队列与map的初始化，que1代表从起始状态遍历，que2从终止状态开始，mp1和mp2分别对应两者出现过的状态</span></span><br><span class="line">	<span class="keyword">while</span> (que1.<span class="built_in">size</span>() &amp;&amp; que2.<span class="built_in">size</span>()) &#123;</span><br><span class="line">		<span class="keyword">if</span> (mp1[Front.hash] + mp2[Tail.hash] &gt; <span class="number">8</span>)<span class="comment">//如果两者的步数和已经超过8，返回失败</span></span><br><span class="line">			<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">		<span class="keyword">int</span> re;</span><br><span class="line">		<span class="keyword">if</span> (que1.<span class="built_in">size</span>() &lt;= que2.<span class="built_in">size</span>()) &#123;<span class="comment">//size小的优先，这样就能达到双端遍历的效果</span></span><br><span class="line">			re = <span class="built_in">solve</span>(que1, mp1, mp2);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			re = <span class="built_in">solve</span>(que2, mp2, mp1);</span><br><span class="line">		<span class="keyword">if</span> (re != <span class="number">-1</span> &amp;&amp; re &lt;= <span class="number">8</span>)</span><br><span class="line">			<span class="keyword">return</span> re;</span><br><span class="line">		<span class="keyword">if</span> (re &gt; <span class="number">8</span>)</span><br><span class="line">			<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> x, y;</span><br><span class="line">	<span class="keyword">while</span> (cin &gt;&gt; x &gt;&gt; y) &#123;</span><br><span class="line">		x--, y--;</span><br><span class="line">		<span class="built_in">memset</span>(Front.grid, <span class="literal">false</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(Front.grid));</span><br><span class="line">		<span class="built_in">memset</span>(Tail.grid, <span class="literal">false</span> , <span class="built_in"><span class="keyword">sizeof</span></span>(Tail.grid));</span><br><span class="line">		Front.grid[x][y] = <span class="literal">true</span>;</span><br><span class="line">		Front.chess[<span class="number">0</span>][<span class="number">0</span>] = x, Front.chess[<span class="number">0</span>][<span class="number">1</span>] = y;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">3</span>; i++) &#123;</span><br><span class="line">			cin &gt;&gt; x &gt;&gt; y;</span><br><span class="line">			x--, y--;</span><br><span class="line">			Front.grid[x][y] = <span class="literal">true</span>;</span><br><span class="line">			Front.chess[i][<span class="number">0</span>] = x, Front.chess[i][<span class="number">1</span>] = y;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">			cin &gt;&gt; x &gt;&gt; y;</span><br><span class="line">			x--, y--;</span><br><span class="line">			Tail.grid[x][y] = <span class="literal">true</span>;</span><br><span class="line">			Tail.chess[i][<span class="number">0</span>] = x, Tail.chess[i][<span class="number">1</span>] = y;</span><br><span class="line">		&#125;</span><br><span class="line">		Front.hash = <span class="built_in">ToHash</span>(Front);</span><br><span class="line">		Tail.hash = <span class="built_in">ToHash</span>(Tail);</span><br><span class="line">		<span class="keyword">if</span> (Front.hash == Tail.hash)</span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;YES&quot;</span> &lt;&lt; endl;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="keyword">int</span> re = <span class="built_in">bfs</span>();</span><br><span class="line">			<span class="keyword">if</span> (re == <span class="number">-1</span>)</span><br><span class="line">				cout &lt;&lt; <span class="string">&quot;NO&quot;</span> &lt;&lt; endl;</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">				cout &lt;&lt; <span class="string">&quot;YES&quot;</span> &lt;&lt; endl;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="hdu1495"><a href="#hdu1495" class="headerlink" title="hdu1495 "></a><a href="https://acm.dingbacode.com/showproblem.php?pid=1495">hdu1495 </a></h2><p>题意是给定三个杯子，第一个被子装满水，通过这三个被子互相倒进倒出能否把水平分</p>
<h3 id="题解-6"><a href="#题解-6" class="headerlink" title="题解"></a>题解</h3><p>题目的要求是出现一个杯子为空，其它两个杯子装等量的水的情况（我第一次理解成了只要可以两个人喝到相同的水就行了，于是一边倒水一边喝，wa了老久━┳━　━┳━)。搜索的重点就是去记录状态，这道题将三个杯子当前的装水量为一个状态进行搜索，所以开一个三维的vis[s的水量][n的水量][m的水量]bool数组来记录当前状态，每一个状态有6个方向分别是s-&gt;n,s-&gt;m,n-&gt;s,n-&gt;m,m-&gt;s,m-&gt;n(看起来代码长其实很多都是重复操作)</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 105</span></span><br><span class="line"><span class="keyword">bool</span> vis[MAXN][MAXN][MAXN];</span><br><span class="line"><span class="keyword">int</span> s, n, m;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">	<span class="keyword">int</span> s, n, m, step;</span><br><span class="line">&#125;;</span><br><span class="line">node start;</span><br><span class="line">node re;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bfs</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	queue&lt;node&gt; que;</span><br><span class="line">	<span class="built_in">memset</span>(vis, <span class="literal">false</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(vis));</span><br><span class="line">	vis[start.s][start.n][start.m] = <span class="literal">true</span>;</span><br><span class="line">	que.<span class="built_in">push</span>(start);</span><br><span class="line">	<span class="keyword">while</span> (!que.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">		node tmp = que.<span class="built_in">front</span>();</span><br><span class="line">		que.<span class="built_in">pop</span>();</span><br><span class="line">		<span class="keyword">if</span> (tmp.s == <span class="number">0</span> &amp;&amp; tmp.m == tmp.n || tmp.m == <span class="number">0</span> &amp;&amp; tmp.s == tmp.n || tmp.n == <span class="number">0</span> &amp;&amp; tmp.s == tmp.m)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">return</span> tmp.step;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//s--&gt;n</span></span><br><span class="line">	</span><br><span class="line">		<span class="keyword">if</span> (tmp.s &amp;&amp; n &gt; tmp.n) &#123;<span class="comment">//s有水并且n还没灌满</span></span><br><span class="line">			node x = tmp;</span><br><span class="line">			<span class="keyword">if</span> (tmp.s &gt; n - tmp.n) &#123;<span class="comment">//s的水比n现在能装的还多</span></span><br><span class="line">				x.s -= n - tmp.n;</span><br><span class="line">				x.n = n;</span><br><span class="line">				x.step += <span class="number">1</span>;</span><br><span class="line">				<span class="keyword">if</span> (!vis[x.s][x.n][x.m]) &#123;</span><br><span class="line">					que.<span class="built_in">push</span>(x);</span><br><span class="line">					vis[x.s][x.n][x.m] = <span class="literal">true</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> &#123;</span><br><span class="line">				x.s = <span class="number">0</span>;</span><br><span class="line">				x.n += tmp.s;</span><br><span class="line">				x.step += <span class="number">1</span>;</span><br><span class="line">				<span class="keyword">if</span> (!vis[x.s][x.n][x.m]) &#123;</span><br><span class="line">					que.<span class="built_in">push</span>(x);</span><br><span class="line">					vis[x.s][x.n][x.m] = <span class="literal">true</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//s--&gt;m</span></span><br><span class="line">		<span class="keyword">if</span> (tmp.s &amp;&amp; m &gt; tmp.m) &#123;<span class="comment">//s有水并且m还没灌满</span></span><br><span class="line">			node x = tmp;</span><br><span class="line">			<span class="keyword">if</span> (tmp.s &gt; m - tmp.m) &#123;<span class="comment">//s的水比m现在能装的还多</span></span><br><span class="line">				x.s -= m - tmp.m;</span><br><span class="line">				x.m = m;</span><br><span class="line">				x.step += <span class="number">1</span>;</span><br><span class="line">				<span class="keyword">if</span> (!vis[x.s][x.n][x.m]) &#123;</span><br><span class="line">					que.<span class="built_in">push</span>(x);</span><br><span class="line">					vis[x.s][x.n][x.m] = <span class="literal">true</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> &#123;</span><br><span class="line">				x.s = <span class="number">0</span>;</span><br><span class="line">				x.m += tmp.s;</span><br><span class="line">				x.step += <span class="number">1</span>;</span><br><span class="line">				<span class="keyword">if</span> (!vis[x.s][x.n][x.m]) &#123;</span><br><span class="line">					que.<span class="built_in">push</span>(x);</span><br><span class="line">					vis[x.s][x.n][x.m] = <span class="literal">true</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//n--&gt;s</span></span><br><span class="line">		<span class="keyword">if</span> (tmp.n &amp;&amp; s &gt; tmp.s) &#123;<span class="comment">//n有水并且s还没灌满</span></span><br><span class="line">			node x = tmp;</span><br><span class="line">			<span class="keyword">if</span> (tmp.n &gt; s - tmp.s) &#123;<span class="comment">//n的水比s现在能装的还多</span></span><br><span class="line">				x.n -= s - tmp.s;</span><br><span class="line">				x.s = s;</span><br><span class="line">				x.step += <span class="number">1</span>;</span><br><span class="line">				<span class="keyword">if</span> (!vis[x.s][x.n][x.m]) &#123;</span><br><span class="line">					que.<span class="built_in">push</span>(x);</span><br><span class="line">					vis[x.s][x.n][x.m] = <span class="literal">true</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> &#123;</span><br><span class="line">				x.n = <span class="number">0</span>;</span><br><span class="line">				x.s += tmp.n;</span><br><span class="line">				x.step += <span class="number">1</span>;</span><br><span class="line">				<span class="keyword">if</span> (!vis[x.s][x.n][x.m]) &#123;</span><br><span class="line">					que.<span class="built_in">push</span>(x);</span><br><span class="line">					vis[x.s][x.n][x.m] = <span class="literal">true</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//n--&gt;m</span></span><br><span class="line">		<span class="keyword">if</span> (tmp.n &amp;&amp; m &gt; tmp.m) &#123;<span class="comment">//n有水并且m还没灌满</span></span><br><span class="line">			node x = tmp;</span><br><span class="line">			<span class="keyword">if</span> (tmp.n &gt; m - tmp.m) &#123;<span class="comment">//n的水比m现在能装的还多</span></span><br><span class="line">				x.n -= m - tmp.m;</span><br><span class="line">				x.m = m;</span><br><span class="line">				x.step += <span class="number">1</span>;</span><br><span class="line">				<span class="keyword">if</span> (!vis[x.s][x.n][x.m]) &#123;</span><br><span class="line">					que.<span class="built_in">push</span>(x);</span><br><span class="line">					vis[x.s][x.n][x.m] = <span class="literal">true</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> &#123;</span><br><span class="line">				x.n = <span class="number">0</span>;</span><br><span class="line">				x.m += tmp.n;</span><br><span class="line">				x.step += <span class="number">1</span>;</span><br><span class="line">				<span class="keyword">if</span> (!vis[x.s][x.n][x.m]) &#123;</span><br><span class="line">					que.<span class="built_in">push</span>(x);</span><br><span class="line">					vis[x.s][x.n][x.m] = <span class="literal">true</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//m--&gt;n</span></span><br><span class="line">		<span class="keyword">if</span> (tmp.m &amp;&amp; n &gt; tmp.n) &#123;<span class="comment">//n有水并且n还没灌满</span></span><br><span class="line">			node x = tmp;</span><br><span class="line">			<span class="keyword">if</span> (tmp.m &gt; n - tmp.n) &#123;<span class="comment">//m的水比n现在能装的还多</span></span><br><span class="line">				x.m -= n - tmp.n;</span><br><span class="line">				x.n = n;</span><br><span class="line">				x.step += <span class="number">1</span>;</span><br><span class="line">				<span class="keyword">if</span> (!vis[x.s][x.n][x.m]) &#123;</span><br><span class="line">					que.<span class="built_in">push</span>(x);</span><br><span class="line">					vis[x.s][x.n][x.m] = <span class="literal">true</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> &#123;</span><br><span class="line">				x.m = <span class="number">0</span>;</span><br><span class="line">				x.n += tmp.m;</span><br><span class="line">				x.step += <span class="number">1</span>;</span><br><span class="line">				<span class="keyword">if</span> (!vis[x.s][x.n][x.m]) &#123;</span><br><span class="line">					que.<span class="built_in">push</span>(x);</span><br><span class="line">					vis[x.s][x.n][x.m] = <span class="literal">true</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//m--&gt;s</span></span><br><span class="line">		<span class="keyword">if</span> (tmp.m &amp;&amp; s &gt; tmp.s) &#123;<span class="comment">//m有水并且s还没灌满</span></span><br><span class="line">			node x = tmp;</span><br><span class="line">			<span class="keyword">if</span> (tmp.m &gt; s - tmp.s) &#123;<span class="comment">//m的水比s现在能装的还多</span></span><br><span class="line">				x.m -= s - tmp.s;</span><br><span class="line">				x.s = s;</span><br><span class="line">				x.step += <span class="number">1</span>;</span><br><span class="line">				<span class="keyword">if</span> (!vis[x.s][x.n][x.m]) &#123;</span><br><span class="line">					que.<span class="built_in">push</span>(x);</span><br><span class="line">					vis[x.s][x.n][x.m] = <span class="literal">true</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> &#123;</span><br><span class="line">				x.m = <span class="number">0</span>;</span><br><span class="line">				x.s += tmp.m;</span><br><span class="line">				x.step += <span class="number">1</span>;</span><br><span class="line">				<span class="keyword">if</span> (!vis[x.s][x.n][x.m]) &#123;</span><br><span class="line">					que.<span class="built_in">push</span>(x);</span><br><span class="line">					vis[x.s][x.n][x.m] = <span class="literal">true</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">while</span> (cin &gt;&gt; s &gt;&gt; n &gt;&gt; m) &#123;</span><br><span class="line">		<span class="keyword">if</span> (s == n &amp;&amp; n == m &amp;&amp; s == <span class="number">0</span>)</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		start.s = s, start.n = <span class="number">0</span>, start.m = <span class="number">0</span>;</span><br><span class="line">		start.step = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">if</span> (s &amp; <span class="number">1</span>) &#123;</span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;NO&quot;</span> &lt;&lt; endl;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="keyword">int</span> re = <span class="built_in">bfs</span>();</span><br><span class="line">			<span class="keyword">if</span> (re) &#123;</span><br><span class="line">				cout &lt;&lt; re &lt;&lt; endl;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">				cout &lt;&lt; <span class="string">&quot;NO&quot;</span> &lt;&lt; endl;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a href="http://poj.org/problem?id=3126">POJ3126 – Prime Path</a></p>
<p><em>2021.7.19</em></p>
<p>题意是给定一个起始的四位的素数和目标四位的素数，每一步可以变动一个位置上的数字，要求变动之后数字还是素数，且还是要四位数，求最少步数。</p>
<h3 id="题解-7"><a href="#题解-7" class="headerlink" title="题解"></a>题解</h3><p>最近做这个专题发现基本上都是问最少步数，也基本上都是bfs,这道题的状态可以直接由一个数字本身确定，由于范围较小，可以提前将所有的四位素数计算出来，方便后面判断。代码如下</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">bool</span> prime[<span class="number">100000</span>];<span class="comment">//判断素数</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; <span class="number">100000</span>; i++) &#123;</span><br><span class="line">		<span class="keyword">if</span> (!prime[i]) &#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">2</span>; j * i &lt; <span class="number">100000</span>; j++) &#123;</span><br><span class="line">				prime[i * j] = <span class="literal">true</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;<span class="comment">//埃氏筛</span></span><br><span class="line">    </span><br><span class="line">	<span class="keyword">int</span> t, a, b;</span><br><span class="line">	cin &gt;&gt; t;</span><br><span class="line">	<span class="keyword">bool</span> flag = <span class="literal">false</span>;</span><br><span class="line">	<span class="keyword">while</span> (t--) &#123;</span><br><span class="line">		cin &gt;&gt; a &gt;&gt; b;</span><br><span class="line">		queue&lt;<span class="keyword">int</span>&gt;que;</span><br><span class="line">		map&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; mp;<span class="comment">//bfs的标记数组，mp[1000]=1表示1000y</span></span><br><span class="line">		mp[a] = <span class="number">0</span>;</span><br><span class="line">		que.<span class="built_in">push</span>(a);</span><br><span class="line">		<span class="keyword">while</span> (!que.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">			<span class="keyword">int</span> tmp = que.<span class="built_in">front</span>();</span><br><span class="line">			que.<span class="built_in">pop</span>();</span><br><span class="line">			<span class="keyword">if</span> (tmp == b) &#123;</span><br><span class="line">				flag = <span class="literal">true</span>;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">            <span class="comment">//下面四个for循环分别对应修改四个位置上的数字</span></span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">				<span class="keyword">int</span> num = tmp % <span class="number">1000</span> + i * <span class="number">1000</span>;</span><br><span class="line">				<span class="keyword">if</span> (!prime[num] &amp;&amp; mp.<span class="built_in">count</span>(num) == <span class="number">0</span>&amp;&amp;num&gt;<span class="number">1000</span>) &#123;</span><br><span class="line">					mp[num] = mp[tmp] + <span class="number">1</span>;</span><br><span class="line">					que.<span class="built_in">push</span>(num);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">				<span class="keyword">int</span> num = tmp - ((tmp / <span class="number">100</span>) % <span class="number">10</span>) * <span class="number">100</span> + i * <span class="number">100</span>;</span><br><span class="line">				<span class="keyword">if</span> (!prime[num] &amp;&amp; mp.<span class="built_in">count</span>(num) == <span class="number">0</span>&amp;&amp;num&gt;<span class="number">1000</span>) &#123;</span><br><span class="line">					mp[num] = mp[tmp] + <span class="number">1</span>;</span><br><span class="line">					que.<span class="built_in">push</span>(num);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">				<span class="keyword">int</span> num = tmp - ((tmp / <span class="number">10</span>) % <span class="number">10</span>) * <span class="number">10</span> + i * <span class="number">10</span>;</span><br><span class="line">				<span class="keyword">if</span> (!prime[num] &amp;&amp; mp.<span class="built_in">count</span>(num) == <span class="number">0</span>&amp;&amp;num&gt;<span class="number">1000</span>) &#123;</span><br><span class="line">					mp[num] = mp[tmp] + <span class="number">1</span>;</span><br><span class="line">					que.<span class="built_in">push</span>(num);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">				<span class="keyword">int</span> num = tmp -(tmp%<span class="number">10</span>) + i;</span><br><span class="line">				<span class="keyword">if</span> (!prime[num] &amp;&amp; mp.<span class="built_in">count</span>(num) == <span class="number">0</span>&amp;&amp;num&gt;<span class="number">1000</span>) &#123;</span><br><span class="line">					mp[num] = mp[tmp] + <span class="number">1</span>;</span><br><span class="line">					que.<span class="built_in">push</span>(num);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (flag)</span><br><span class="line">			cout &lt;&lt; mp[b]&lt;&lt;endl;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;impossible&quot;</span> &lt;&lt; endl;</span><br><span class="line">		</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>acm</tag>
      </tags>
  </entry>
  <entry>
    <title>Kuangbin-并查集</title>
    <url>/2021/07/20/Kuangbin-%E5%B9%B6%E6%9F%A5%E9%9B%86/</url>
    <content><![CDATA[<h1 id="并查集"><a href="#并查集" class="headerlink" title="并查集"></a>并查集</h1><h2 id="HDU3038"><a href="#HDU3038" class="headerlink" title="HDU3038"></a><a href="https://acm.dingbacode.com/showproblem.php?pid=3038">HDU3038</a></h2><p><em>2021.7.22</em></p>
<p>题意是假设有一段序列a，长度为n,接下来有m条信息 ，l r x表示a[l]+…+a[r]的这段区间之和为x,问这m条信息中哪些是错误的。比如1 100 10–1 10 1–11 100 2,很明显11 100 2是错误的，因为1 100 10 与 1 10 1可以推出11 100为9</p>
<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p><strong>带权并查集的应用</strong>首先从题的例子来观察，如果[1,10]的和为100，[7,10]的和为28，那就能推出来[1,6]为72，注意这里不是[1,7]，因为a[7]是在[7,10]这段序列里的，现在我们建立一个带权并查集，rela[x]表示x到自己根节点的距离，1 10 100就可以表示为pre[10]=1,rela[10]=100。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">200005</span>;</span><br><span class="line"><span class="keyword">int</span> pre[maxn];</span><br><span class="line"><span class="keyword">int</span> rela[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Find</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (x == pre[x])</span><br><span class="line">		<span class="keyword">return</span> pre[x];</span><br><span class="line">	<span class="keyword">int</span> f = <span class="built_in">Find</span>(pre[x]);</span><br><span class="line">	rela[x] += rela[pre[x]];</span><br><span class="line">	pre[x] = f;</span><br><span class="line">	<span class="keyword">return</span> pre[x];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> Min, <span class="keyword">int</span> Max,<span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> fx = <span class="built_in">Find</span>(Min);</span><br><span class="line">	<span class="keyword">int</span> fy = <span class="built_in">Find</span>(Max);</span><br><span class="line">    <span class="comment">//合并有两种情况，可以去手推一下面两种情况得出两种情况的合并公式</span></span><br><span class="line">    <span class="comment">//假设进来的Min为5，Max为8</span></span><br><span class="line">    <span class="comment">//第一种情况：pre[8]=0,rela[8]=100,即有信息1 8 100,pre[5]=3,rela[5]=10,即已有信息4 5 10</span></span><br><span class="line">    <span class="comment">//那显然应该让pre[3]=0,那rela[3]应该怎么算呢</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//第二种情况：pre[8]=3,pre[5]=0，显然还是应该让pre[3]=0，但rela[3]怎么计算（建议画图理解）</span></span><br><span class="line">	<span class="keyword">if</span> (fx != fy) &#123;</span><br><span class="line">		<span class="keyword">if</span> (fx &lt; fy) &#123;</span><br><span class="line">			pre[fy] = fx;</span><br><span class="line">			rela[fy] = rela[Min] + num - rela[Max];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			pre[fx] = fy;</span><br><span class="line">			rela[fx] = rela[Max] - num - rela[Min];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> n, m, ans;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">while</span> (cin &gt;&gt; n &gt;&gt; m)</span><br><span class="line">	&#123;</span><br><span class="line">		ans = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">int</span> a, b, c;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n+<span class="number">1</span>; i++) &#123;</span><br><span class="line">			pre[i] = i;</span><br><span class="line">			rela[i] = <span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">while</span> (m--) &#123;</span><br><span class="line">			cin &gt;&gt; a &gt;&gt; b &gt;&gt; c;</span><br><span class="line">			a--;<span class="comment">//这里是为了前面说到的那种1 10 100和7 10 28应该推出来[1,6]为72，而不是[1,7]为28,因此假设根节点为x，子节点为y，则rela[y]表示的是(x,y]这段区间的和，即[x+1,y]的和</span></span><br><span class="line">			<span class="keyword">if</span> (<span class="built_in">Find</span>(a) == <span class="built_in">Find</span>(b)) &#123;<span class="comment">//如果两点的祖先相同，那通过两者与根节点距离之差可以推出来两者的距离的，就能拿来与c比较</span></span><br><span class="line">				<span class="keyword">if</span> (rela[b] - rela[a] != c) &#123;<span class="comment">//与已知信息矛盾，则错误信息数加一</span></span><br><span class="line">					ans++;</span><br><span class="line">					<span class="keyword">continue</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> &#123;</span><br><span class="line">				<span class="built_in">merge</span>(a, b, c);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="POJ1417-–-True-Liars"><a href="#POJ1417-–-True-Liars" class="headerlink" title="POJ1417 – True Liars"></a><a href="http://poj.org/problem?id=1417">POJ1417 – True Liars</a></h2><p>题意为知道好人与坏人的个数为p1，p2，并且有n条信息，每条信息格式为 a 说 b是好人或者坏人，规定好人永远说实话，坏人永远说谎话，则根据n条信息与已知的人数，能否推出哪些人是好人。</p>
<h3 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a>题解</h3><p>==带权并查集与dp==这种n条信息的与并查集的题形式很像，首先要分析出 <strong>a b yes</strong> 的形式出现时，就代表a b是同一阵营的，<strong>a b no</strong> 则代表两者不同阵营（可以去列一下情况看看），利用带权并查集可以将人分成一颗一颗的并查集树。剩下的就是通过这些树看能不能唯一构造出符合条件的人数。</p>
<p>现在我们知道的只是一团一团的人，每一团里有两个阵营，但是并不知道每个团里哪个阵营是好人。</p>
<p>定义<strong>dp[i][j]:=前i棵树恰好凑出j个人有多少种情况</strong>，如果最后dp[NumOfTree][p1]==1,则说明有解。这道题虽然有dp但其实想到dp之后，dp的转移方程并不难，为dp[i][j]=dp[i-1][j-第i棵树中与根同一阵营的人数]+dp[i-1][j-第i棵树与根不同阵营的人数]，从转移方程中也可以看出需要记录每一棵并查集树底下两个阵营的人数，因为要输出哪些人是好人，所以每棵树还需要记录底下哪些人跟自己是同一阵营的，哪些不是。</p>
<p>代码如下</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e3</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> pre[maxn];</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; tree[maxn];<span class="comment">//粗糙地记录根节点下有哪些节点</span></span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; same[maxn];<span class="comment">//same[i]表树第i颗树里，与根节点相同阵营的节点编号</span></span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; differ[maxn];</span><br><span class="line"><span class="keyword">int</span> rela[maxn];<span class="comment">//权数组，0为同一阵营，1为不同阵营</span></span><br><span class="line"><span class="keyword">int</span> SameNum[maxn];<span class="comment">//SameNum[i]表示第i棵树里与根节点同一阵营的人数</span></span><br><span class="line"><span class="keyword">int</span> DifferNum[maxn];</span><br><span class="line"><span class="keyword">int</span> dp[maxn][maxn];</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt;ans;<span class="comment">//存最后要输出哪些人</span></span><br><span class="line"><span class="keyword">int</span> n, p1, p2;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= p1 + p2; i++) &#123;</span><br><span class="line">		pre[i] = i;</span><br><span class="line">		same[i].<span class="built_in">clear</span>();</span><br><span class="line">		differ[i].<span class="built_in">clear</span>();</span><br><span class="line">		tree[i].<span class="built_in">clear</span>();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">memset</span>(rela, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(rela));<span class="comment">//初始情况每个人与自己同一阵营</span></span><br><span class="line">	<span class="built_in">memset</span>(SameNum, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(SameNum));</span><br><span class="line">	<span class="built_in">memset</span>(DifferNum, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(DifferNum));</span><br><span class="line">	<span class="built_in">memset</span>(dp, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(dp));</span><br><span class="line">	ans.<span class="built_in">clear</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Find</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (pre[x] == x) &#123;</span><br><span class="line">		<span class="keyword">return</span> pre[x];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">int</span> root = <span class="built_in">Find</span>(pre[x]);</span><br><span class="line">	rela[x] ^= rela[pre[x]];<span class="comment">//带权并查集Find的套路操作，在找根的过程中要更新关系</span></span><br><span class="line">	pre[x] = root;</span><br><span class="line">	<span class="keyword">return</span> pre[x];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> fx = <span class="built_in">Find</span>(x);</span><br><span class="line">	<span class="keyword">int</span> fy = <span class="built_in">Find</span>(y);</span><br><span class="line">	<span class="keyword">if</span> (fx != fy) &#123;</span><br><span class="line">		pre[fx] = fy;</span><br><span class="line">		rela[fx] = rela[x] ^ rela[y] ^ r;<span class="comment">//带权并查集套路操作，使用^是应为只有0,1两种关系，其它多种关系情况要具体分析</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">	cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">	<span class="keyword">while</span> (cin &gt;&gt; n &gt;&gt; p1 &gt;&gt; p2) &#123;</span><br><span class="line">		<span class="keyword">if</span> (n == p1 &amp;&amp; p1 == p2 &amp;&amp; n == <span class="number">0</span>)</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="built_in">init</span>();<span class="comment">//记得并查集每次要初始化</span></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">			<span class="keyword">int</span> a, b;</span><br><span class="line">			string s;</span><br><span class="line">			cin &gt;&gt; a &gt;&gt; b &gt;&gt; s;</span><br><span class="line">			<span class="keyword">if</span> (s == <span class="string">&quot;yes&quot;</span>)</span><br><span class="line">				<span class="built_in">merge</span>(a, b, <span class="number">0</span>);</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">				<span class="built_in">merge</span>(a, b, <span class="number">1</span>);</span><br><span class="line">		&#125;</span><br><span class="line">        <span class="comment">//好人与坏人一样多，肯定判断不了</span></span><br><span class="line">		<span class="keyword">if</span> (p1 == p2) &#123;</span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;no&quot;</span> &lt;&lt; endl;</span><br><span class="line">			<span class="keyword">continue</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//将现在的森林第一步粗加工，使每个根节点先知道自己有哪些子孙</span></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= p1 + p2; i++) &#123;</span><br><span class="line">			<span class="keyword">int</span> fa = <span class="built_in">Find</span>(i);</span><br><span class="line">			tree[fa].<span class="built_in">push_back</span>(i);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">int</span> cnt = <span class="number">1</span>;<span class="comment">//用来给树编号</span></span><br><span class="line">        <span class="comment">//第二步加工，每棵树编号，并筛出两个阵营的人数与具体哪些人</span></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= p1 + p2; i++) &#123;</span><br><span class="line">			<span class="keyword">if</span> (tree[i].<span class="built_in">size</span>()) &#123;</span><br><span class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; tree[i].<span class="built_in">size</span>(); j++) &#123;</span><br><span class="line">					<span class="keyword">if</span> (rela[tree[i][j]] == <span class="number">0</span>) &#123;</span><br><span class="line">						SameNum[cnt]++;</span><br><span class="line">						same[cnt].<span class="built_in">push_back</span>(tree[i][j]);</span><br><span class="line">					&#125;</span><br><span class="line">					<span class="keyword">else</span> &#123;</span><br><span class="line">						DifferNum[cnt]++;</span><br><span class="line">						differ[cnt].<span class="built_in">push_back</span>(tree[i][j]);</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">				cnt++;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;<span class="comment">//dp初始定义，注意init里面已经将dp全置为0了</span></span><br><span class="line">		<span class="comment">//dp[i][j]:==前i棵树组出j个人的方式有多少种</span></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; cnt; i++) &#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= p1; j++) &#123;</span><br><span class="line">				<span class="keyword">if</span> (j &gt;= SameNum[i]) &#123;</span><br><span class="line">					dp[i][j] += dp[i - <span class="number">1</span>][j - SameNum[i]];</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">if</span> (j &gt;= DifferNum[i]) &#123;</span><br><span class="line">					dp[i][j] += dp[i - <span class="number">1</span>][j - DifferNum[i]];</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (dp[cnt - <span class="number">1</span>][p1] != <span class="number">1</span>) &#123;<span class="comment">//不唯一，或无解</span></span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;no&quot;</span> &lt;&lt; endl;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = cnt - <span class="number">1</span>; i &gt;= <span class="number">1</span>; i--) &#123;</span><br><span class="line">                <span class="comment">//如果最后的结果有唯一解，说明该状态下的前一个状态也一定唯一，因此从后往前推</span></span><br><span class="line">				<span class="keyword">if</span> (p1 &gt;= SameNum[i] &amp;&amp; dp[i - <span class="number">1</span>][p1 - SameNum[i]] == <span class="number">1</span>) &#123;</span><br><span class="line">					<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; same[i].<span class="built_in">size</span>(); j++) &#123;</span><br><span class="line">						ans.<span class="built_in">push_back</span>(same[i][j]);</span><br><span class="line">					&#125;</span><br><span class="line">					p1 -= SameNum[i];</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">else</span> &#123;</span><br><span class="line">					<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; differ[i].<span class="built_in">size</span>(); j++) &#123;</span><br><span class="line">						ans.<span class="built_in">push_back</span>(differ[i][j]);</span><br><span class="line">					&#125;</span><br><span class="line">					p1 -= DifferNum[i];</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="built_in">sort</span>(ans.<span class="built_in">begin</span>(), ans.<span class="built_in">end</span>());<span class="comment">//升序排列</span></span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ans.<span class="built_in">size</span>();i++) &#123;</span><br><span class="line">				cout &lt;&lt; ans[i] &lt;&lt; endl;</span><br><span class="line">			&#125;</span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;end&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="心得"><a href="#心得" class="headerlink" title="心得"></a>心得</h4><p>看到这种类型的信息要想到是不是可能用并查集，之后分析出怎么从给出的信息来确定两个节点的关系，为了方便后面的dp，中间有很多工作都是在去优化结构来使得访问方便，也是数据结构设计为使用方便的一个体现</p>
<h2 id="Connections-in-Galaxy-War-ZOJ-3261"><a href="#Connections-in-Galaxy-War-ZOJ-3261" class="headerlink" title="Connections in Galaxy War - ZOJ 3261"></a><a href="https://zoj.pintia.cn/problem-sets/91827364500/problems/91827368062">Connections in Galaxy War - ZOJ 3261</a></h2><p><em>2021.7.20</em></p>
<p>题目大意为给定点的数量，编号0到n-1，每个点有各自的权值，再给M条信息，哪两个点直接相连。现在有Q个操作，每个操作有两种情况，一种是Query a,查询与a连通的点权值最大编号最小的点，如果最大权值比a小则输出-1，否则输出找到的编号；第二种情况是Destroy a b,表示切断a 与 b直接相连的边。</p>
<!---more--->

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e4</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">map&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;, <span class="keyword">bool</span>&gt; mp;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">	<span class="keyword">int</span> a, b;</span><br><span class="line">	<span class="keyword">int</span> flag;</span><br><span class="line">&#125;operation[maxn*<span class="number">5</span>];</span><br><span class="line"><span class="keyword">int</span> pre[maxn];</span><br><span class="line"><span class="keyword">int</span> power[maxn];</span><br><span class="line"><span class="keyword">int</span> ans[maxn * <span class="number">5</span>];</span><br><span class="line"><span class="keyword">int</span> n, m, q;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">		pre[i] = i;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Find</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> x == pre[x] ? x : (pre[x] = <span class="built_in">Find</span>(pre[x]));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> fx = <span class="built_in">Find</span>(x);</span><br><span class="line">	<span class="keyword">int</span> fy = <span class="built_in">Find</span>(y);</span><br><span class="line">	<span class="keyword">if</span> (fx != fy) &#123;</span><br><span class="line">		<span class="keyword">if</span> (power[fx] &gt; power[fy] || power[fx] == power[fy] &amp;&amp; fx &lt; fy)</span><br><span class="line">			pre[fy] = fx;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			pre[fx] = fy;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">	cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">	<span class="keyword">int</span> tag = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">while</span> (cin &gt;&gt; n) &#123;</span><br><span class="line">		<span class="built_in">init</span>();</span><br><span class="line">		mp.<span class="built_in">clear</span>();</span><br><span class="line">		<span class="keyword">if</span> (tag == <span class="number">0</span>)</span><br><span class="line">			cout &lt;&lt; endl;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			tag = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">			cin &gt;&gt; power[i];</span><br><span class="line">		<span class="keyword">int</span> t;</span><br><span class="line">		cin &gt;&gt; t;</span><br><span class="line">		<span class="keyword">while</span> (t--) &#123;</span><br><span class="line">			<span class="keyword">int</span> a, b;</span><br><span class="line">			cin &gt;&gt; a &gt;&gt; b;</span><br><span class="line">			<span class="keyword">if</span> (a &gt; b)</span><br><span class="line">				<span class="built_in">swap</span>(a, b);</span><br><span class="line">			mp[&#123;a, b&#125;] = <span class="literal">true</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		cin &gt;&gt; q;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; q; i++) &#123;</span><br><span class="line">			string s;</span><br><span class="line">			<span class="keyword">int</span> a, b;</span><br><span class="line">			cin &gt;&gt; s;</span><br><span class="line">			<span class="keyword">if</span> (s == <span class="string">&quot;query&quot;</span>) &#123;</span><br><span class="line">				cin &gt;&gt; a;</span><br><span class="line">				operation[i] = &#123; a,<span class="number">0</span>,<span class="number">1</span> &#125;;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> &#123;</span><br><span class="line">				cin &gt;&gt; a &gt;&gt; b;</span><br><span class="line">				<span class="keyword">if</span> (a &gt; b)</span><br><span class="line">					<span class="built_in">swap</span>(a, b);</span><br><span class="line">				operation[i] = &#123; a,b,<span class="number">0</span> &#125;;</span><br><span class="line">				mp[&#123;a, b&#125;] = <span class="literal">false</span>;</span><br><span class="line">				</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">auto</span>&amp; i : mp) &#123;</span><br><span class="line">			<span class="keyword">if</span> (i.second) &#123;</span><br><span class="line">				<span class="built_in">merge</span>(i.first.first, i.first.second);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = q - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">			<span class="keyword">if</span> (operation[i].flag == <span class="number">0</span>) &#123;</span><br><span class="line">				<span class="built_in">merge</span>(operation[i].a, operation[i].b);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> &#123;</span><br><span class="line">				<span class="keyword">int</span> tmp = <span class="built_in">Find</span>(operation[i].a);</span><br><span class="line">				<span class="keyword">if</span> (power[tmp] &gt; power[operation[i].a] &amp;&amp; tmp != operation[i].a)</span><br><span class="line">					ans[cnt++] = tmp;</span><br><span class="line">				<span class="keyword">else</span></span><br><span class="line">					ans[cnt++] = <span class="number">-1</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = cnt - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">			cout &lt;&lt; ans[i] &lt;&lt; endl;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="POJ2492-–-A-Bug’s-Life"><a href="#POJ2492-–-A-Bug’s-Life" class="headerlink" title="POJ2492 – A Bug’s Life "></a><a href="http://poj.org/problem?id=2492">POJ2492 – A Bug’s Life </a></h2><p><em>2021.7.20</em></p>
<p>题意是给定点的数量和关系数目，每个点都有一种性别，总共两种性别，在接下来的信息中表示两个点有互动，即两个点是异性的，判断给出的信息中是否出现了同性互动。</p>
<h3 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a>题解</h3><p><strong>简单带权并查集的应用</strong> ，像这种关系只有两种的并查集可以通过异或来操作，其它情况也有相应的公式，这道题就是一行一行的扫描合并，只不过在合并过程当中如果发现已经连通要判断一下两者关系，如果两者与根节点的关系相同那两者就是同性。</p>
<!---more--->

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">2005</span>;</span><br><span class="line"><span class="keyword">int</span> pre[maxn];</span><br><span class="line"><span class="keyword">int</span> rela[maxn];<span class="comment">//关系数组，存的是节点与父亲节点的关系，而不是与根的关系，在Find那里要用到</span></span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">int</span> Case;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; i++)</span><br><span class="line">		pre[i] = i;</span><br><span class="line">    <span class="comment">//这里初始要将rela设为0表示自己与自己是同性的</span></span><br><span class="line">	<span class="built_in">memset</span>(rela, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(rela));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Find</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (x == pre[x])</span><br><span class="line">		<span class="keyword">return</span> x;</span><br><span class="line">	<span class="keyword">int</span> root = <span class="built_in">Find</span>(pre[x]);</span><br><span class="line">	rela[x] ^= rela[pre[x]];<span class="comment">//此时的pre[x]还是原来的父亲，由于是递归的，此刻父亲的父亲即pre[pre[x]]已经指向根节点了，而rela[pre[x]]就是此刻父亲节点与根节点的关系，由于要压缩路径需要把x的父亲指向root，因此x与root的关系可以又此刻的父亲pre[x]来搭建，就有了rela[x]^rela[pre[x]],因为这是一个只有01两种情况的并查集才用异或，其它情况就需要分析一下</span></span><br><span class="line">	pre[x] = root;<span class="comment">//关系确定好后改变自己的父亲节点</span></span><br><span class="line">    <span class="comment">//因此每一次调用Find都会更新出x与root的关系</span></span><br><span class="line">	<span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> flag)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> fx = <span class="built_in">Find</span>(x);</span><br><span class="line">	<span class="keyword">int</span> fy = <span class="built_in">Find</span>(y);</span><br><span class="line">	<span class="keyword">if</span> (fx != fy) &#123;</span><br><span class="line">		pre[fx] = fy;</span><br><span class="line">		rela[fx] = rela[x] ^ rela[y] ^ flag;<span class="comment">//套路，可以枚举一下情况看看是不是对的。其实也能理解肯定需要知道x与fx的关系和y与fy的关系，然后通过x与y的关系flag将fx与fy联系起来，只不过这里是恰好用到了异或，其它情况不一定是异或但肯定需要这三个数据</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;Case);</span><br><span class="line">	<span class="keyword">int</span> id = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">while</span> (Case--) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;Scenario #%d:\n&quot;</span>, id++);</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">		<span class="built_in">init</span>();</span><br><span class="line">		<span class="keyword">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line">		<span class="keyword">while</span> (m--) &#123;</span><br><span class="line">			<span class="keyword">int</span> a, b;</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;a, &amp;b);</span><br><span class="line">			<span class="keyword">if</span> (!flag)</span><br><span class="line">				<span class="keyword">continue</span>;</span><br><span class="line">			<span class="keyword">if</span> (<span class="built_in">Find</span>(a) == <span class="built_in">Find</span>(b) &amp;&amp; rela[a] == rela[b]) &#123;<span class="comment">//同祖先，与祖先的关系还相同</span></span><br><span class="line">				flag = <span class="literal">false</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> &#123;</span><br><span class="line">				<span class="built_in">merge</span>(a, b, <span class="number">1</span>);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (flag) &#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;No suspicious bugs found!\n\n&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;Suspicious bugs found!\n\n&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="POJ2912-–-Rochambeau"><a href="#POJ2912-–-Rochambeau" class="headerlink" title="POJ2912 – Rochambeau"></a><a href="http://poj.org/problem?id=2912">POJ2912 – Rochambeau</a></h2><p><em>2021.7.20</em></p>
<p>题意是给定人数和信息数，这些人可以被分成三组，三组的关系就是石头剪刀布的关系，相互克制，一个组的人永远出一个手势，但所有人当中有一个裁判会随便出，在接下来的信息当中能否判断谁是裁判，并输出最少判断出裁判是谁是在第几条信息之后，如果无法判断或者有矛盾的情况分别判断出来。</p>
<h3 id="题解-3"><a href="#题解-3" class="headerlink" title="题解"></a>题解</h3><p><strong>枚举加并查集</strong> 首先可以确定的是没有裁判的话就不会有矛盾出现，因为三组人分别只会出自己那组的手势，<strong>也就是说裁判会导致矛盾的出现</strong>，那我们可以去枚举每个编号，第一层for循环用来枚举编号，并且每次都要init并查集，每条信息是以结构体存储的，第二层for枚举所有的边，用与该节点无关的边建立并查集，如果还是出现了矛盾那该节点就肯定不是裁判，记录可能是裁判的个数，最后判断是不是恰好为1,为0就是Impossible,大于1则无法判断。</p>
<p>最后是要判断在第几行可以得出裁判，因为要判断n-1个人都不是裁判，因此最少行应该是判断出n-1个人不是裁判里最长的那个信息，具体参见代码</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">505</span>;</span><br><span class="line"><span class="keyword">int</span> pre[maxn];</span><br><span class="line"><span class="keyword">int</span> rela[maxn];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">	<span class="keyword">int</span> x, y;</span><br><span class="line">	<span class="keyword">char</span> flag;<span class="comment">//本题采用的是离线操作，需要存储每条边的信息</span></span><br><span class="line">&#125;r[<span class="number">2005</span>];</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">int</span> Case;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; i++)</span><br><span class="line">		pre[i] = i;</span><br><span class="line">	<span class="built_in">memset</span>(rela, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(rela));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Find</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (x == pre[x])</span><br><span class="line">		<span class="keyword">return</span> x;</span><br><span class="line">	<span class="keyword">int</span> root = <span class="built_in">Find</span>(pre[x]);</span><br><span class="line">	rela[x] = (rela[x] + rela[pre[x]]) % <span class="number">3</span>;<span class="comment">//公式得出详见下图</span></span><br><span class="line">	pre[x] = root;</span><br><span class="line">	<span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y,<span class="keyword">int</span> flag)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> fx = <span class="built_in">Find</span>(x);</span><br><span class="line">	<span class="keyword">int</span> fy = <span class="built_in">Find</span>(y);</span><br><span class="line">	<span class="keyword">if</span> (fx != fy) &#123;</span><br><span class="line">		pre[fx] = fy;</span><br><span class="line">		rela[fx] = (rela[y] + flag - rela[x] + <span class="number">3</span>) % <span class="number">3</span>;<span class="comment">//公式得出详见下图</span></span><br><span class="line">		<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="keyword">if</span> ((rela[x] - rela[y] + <span class="number">3</span>) % <span class="number">3</span> != flag)</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">while</span> (cin &gt;&gt; n &gt;&gt; m) &#123;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">			<span class="keyword">int</span> a, b;</span><br><span class="line">			<span class="keyword">char</span> c;</span><br><span class="line">			cin &gt;&gt; r[i].x &gt;&gt; r[i].flag &gt;&gt; r[i].y;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">int</span> pos, lstline = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">			<span class="built_in">init</span>();</span><br><span class="line">			<span class="keyword">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;=m; j++) &#123;</span><br><span class="line">				<span class="keyword">if</span> (r[j].x == i || r[j].y == i)</span><br><span class="line">					<span class="keyword">continue</span>;</span><br><span class="line">				<span class="keyword">if</span> (!<span class="built_in">merge</span>(r[j].x, r[j].y, r[j].flag == <span class="string">&#x27;=&#x27;</span> ? <span class="number">0</span> : (r[j].flag == <span class="string">&#x27;&lt;&#x27;</span> ? <span class="number">1</span> : <span class="number">2</span>))) &#123;</span><br><span class="line">					flag = <span class="literal">false</span>;</span><br><span class="line">					lstline = <span class="built_in">max</span>(j, lstline);<span class="comment">//记录每次判断出来哪个编号不是裁判需要的最大边的编号</span></span><br><span class="line">					<span class="keyword">break</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> (flag) &#123;</span><br><span class="line">				ans++;<span class="comment">//记录裁判人数</span></span><br><span class="line">				pos = i;<span class="comment">//记录裁判编号</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (ans == <span class="number">0</span>) &#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;Impossible\n&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (ans == <span class="number">1</span>) &#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;Player %d can be determined to be the judge after %d lines\n&quot;</span>,pos,lstline);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;Can not determine\n&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="POJ1733-–-Parity-game"><a href="#POJ1733-–-Parity-game" class="headerlink" title="POJ1733 – Parity game"></a><a href="http://poj.org/problem?id=1733">POJ1733 – Parity game</a></h2><p><em>2021.7.23</em></p>
<p>这道题跟how many wrong那道题很像,题意是一个01序列最多能满足到下列第几条信息</p>
<p>每条信息由a b s组成，表示[a,b]这段区间内1的个数为偶数或者奇数个</p>
<h3 id="题解-4"><a href="#题解-4" class="headerlink" title="题解"></a>题解</h3><p><strong>带权并查集处理区间关系与离散化处理数据</strong>。思路也跟那道题很像，只不过那道题的关系更偏向于一种距离。容易发现如果[a,b]这段区间内的1为偶数个，那么</p>
<p>[1,b]与[1,a-1]含有的1的个数奇偶性是相同的，反之则相反，这就能将a,b建立起一种关系了，这个关系就是并查集需要维护的，另外的就是这道题的N开得很大，但实际数字比较少，直接开一个Pre[N]会爆空间，对数据进行一个离散化的处理即可。即假设有数据10 2 8 4 100000000，先用一个数组把这些数据存起来，之后就假设按照升序排序，那就应该是[2,4,8,10,100000000],只需要开一个pre[4]即可，利用一个中间函数Query(int)将数字映射到相应的位置即可，即假设要让100000000的根为2,那实际的操作就是pre[Query(100000000)]=pre[Query(2)],即pre[5]=pre[1]。最后有可能下面所有信息都能满足，这个地方wa了一次┑(￣Д ￣)┍</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e4</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> pre[maxn];</span><br><span class="line"><span class="keyword">int</span> pos[maxn];<span class="comment">//离散映射数组，pos[i]表示第i大的数字</span></span><br><span class="line"><span class="keyword">int</span> rela[maxn];</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">	<span class="keyword">long</span> <span class="keyword">long</span> a, b;</span><br><span class="line">	<span class="keyword">int</span> flag;</span><br><span class="line">&#125;info[maxn];<span class="comment">//离线操作,存储信息，一方面是离散化需要得到所有数据，一方面是就算之前能判断出结果还是需要读掉后面的数据。</span></span><br><span class="line"><span class="keyword">int</span> num[maxn * <span class="number">2</span>];<span class="comment">//离散操作需要的数组，因为该数组会先存好所有数据，每条信息两个数字，开到maxn*2</span></span><br><span class="line"><span class="comment">//离散化函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">decret</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">sort</span>(num, num + m * <span class="number">2</span>);<span class="comment">//先排序</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m * <span class="number">2</span>; i++) &#123;</span><br><span class="line">		<span class="keyword">if</span> (!i || num[i] != num[i - <span class="number">1</span>]) &#123;<span class="comment">//后面这个判断是去掉那些重复的数字，防止[1,2,2,2]这种情况将2多次存到pos里面</span></span><br><span class="line">			pos[cnt++] = num[i];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Query</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> x)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">lower_bound</span>(pos,pos+cnt, x) - pos;<span class="comment">//x在pos中的位置就能代表x</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Find</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (x == pre[x])</span><br><span class="line">		<span class="keyword">return</span> pre[x];</span><br><span class="line">	<span class="keyword">int</span> root = <span class="built_in">Find</span>(pre[x]);</span><br><span class="line">	rela[x] ^= rela[pre[x]];</span><br><span class="line">	pre[x] = root;</span><br><span class="line">	<span class="keyword">return</span> pre[x];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y,<span class="keyword">int</span> flag)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> fx = <span class="built_in">Find</span>(x);</span><br><span class="line">	<span class="keyword">int</span> fy = <span class="built_in">Find</span>(y);</span><br><span class="line">	<span class="keyword">if</span> (fx != fy) &#123;</span><br><span class="line">		pre[fx] = fy;</span><br><span class="line">		rela[fx] = rela[x] ^ rela[y] ^ flag;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m * <span class="number">2</span>; i++) &#123;</span><br><span class="line">		pre[i] = i;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">int</span> id = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">char</span> s[<span class="number">10</span>];</span><br><span class="line">    </span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">		cin &gt;&gt; info[i].a &gt;&gt; info[i].b &gt;&gt; s;</span><br><span class="line">		<span class="keyword">if</span> (s[<span class="number">0</span>] == <span class="string">&#x27;e&#x27;</span>) &#123;</span><br><span class="line">			info[i].flag = <span class="number">0</span>;<span class="comment">//如果是偶数个是不会改变之前的奇偶性的，而异或操作当中与0异或结果不变，所以用0代表是偶数个</span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			info[i].flag = <span class="number">1</span>;</span><br><span class="line">		info[i].b++;<span class="comment">//跟那道题一样，边界交界处的处理</span></span><br><span class="line">		num[id++] = info[i].a;</span><br><span class="line">		num[id++] = info[i].b;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">decret</span>();</span><br><span class="line">	<span class="keyword">int</span> i;</span><br><span class="line">	<span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">Find</span>(<span class="built_in">Query</span>(info[i].a)) != <span class="built_in">Find</span>(<span class="built_in">Query</span>(info[i].b))) &#123;</span><br><span class="line">			<span class="built_in">merge</span>(<span class="built_in">Query</span>(info[i].a),<span class="built_in">Query</span>(info[i].b), info[i].flag);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (rela[<span class="built_in">Query</span>(info[i].a)] ^ rela[<span class="built_in">Query</span>(info[i].b)] != info[i].flag)&#123;</span><br><span class="line">			cout &lt;&lt; i &lt;&lt; endl;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (i == m)<span class="comment">//万一人家能全满足呢</span></span><br><span class="line">		cout &lt;&lt; i &lt;&lt; endl;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="POJ1984-–-Navigation-Nightmare"><a href="#POJ1984-–-Navigation-Nightmare" class="headerlink" title="POJ1984 – Navigation Nightmare"></a><a href="http://poj.org/problem?id=1984">POJ1984 – Navigation Nightmare</a></h2><p>题意是有N个农场标号1到N，它们分布在一个二维平面上，两个农场之间只能由垂直或者水平的路连接.会给定m条信息 a b c s,表示农场从a往s方向走c的距离就能到达b，比如1 2 10 S表示2在1以南10的距离。需要处理输入a b index表示从前面的index条信息中能否得到a到b的曼哈顿距离,曼哈顿距离就是$|x_1-x_2|+|y_1-y_2|$​.(1,2)与(5,7)的曼哈顿距离就为9</p>
<h3 id="题解-5"><a href="#题解-5" class="headerlink" title="题解"></a>题解</h3><p><strong>多重带权并查集</strong>，如果只有一条线上是很好分析的，就是假设1到2的距离知道，2到3的距离知道那很容易推出1到3的距离，典型的一个带权并查集就够了，现在这道题是在一个二维平面上，但它的连接方式只有水平跟垂直两种，所要求的曼哈顿距离也是水平跟垂直分开求的，所以可以开两个权值数组，用来分别维护水平和竖直两个直线方向上的关系即可求解。另外需要注意一下的是这道题的index是非递减的，之前每次处理一个输入就要清空并查集再重新建立就TE了，我也是看了别人的博客才看到的，之前就一直TE ┑(￣Д ￣)┍</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">4e4</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> n, m, k;</span><br><span class="line"><span class="keyword">int</span> pre[maxn];</span><br><span class="line"><span class="keyword">int</span> vertical[maxn];</span><br><span class="line"><span class="keyword">int</span> horisontal[maxn];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">	<span class="keyword">int</span> a, b;</span><br><span class="line">	<span class="keyword">int</span> h, v;</span><br><span class="line">&#125;info[maxn];<span class="comment">//离线操作，存储信息</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; i++) &#123;</span><br><span class="line">		pre[i] = i;</span><br><span class="line">		vertical[i] = <span class="number">0</span>;</span><br><span class="line">		horisontal[i] = <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">memset</span>(info, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(<span class="number">0</span>));<span class="comment">//这里主要是为了把h与v置为0，但是放在静态区本来也会置为0</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Find</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (x == pre[x])</span><br><span class="line">		<span class="keyword">return</span> pre[x];</span><br><span class="line">	<span class="keyword">int</span> root = <span class="built_in">Find</span>(pre[x]);</span><br><span class="line">    <span class="comment">//每次维护的时候两个方向的权值数组信息要同时维护</span></span><br><span class="line">	vertical[x] += vertical[pre[x]];</span><br><span class="line">	horisontal[x] += horisontal[pre[x]];</span><br><span class="line">	pre[x] = root;</span><br><span class="line">	<span class="keyword">return</span> pre[x];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> ver, <span class="keyword">int</span> hor)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> fx = <span class="built_in">Find</span>(x);</span><br><span class="line">	<span class="keyword">int</span> fy = <span class="built_in">Find</span>(y);</span><br><span class="line">	<span class="keyword">if</span> (fx ^ fy) &#123;</span><br><span class="line">		pre[fx] = fy;</span><br><span class="line">        <span class="comment">//很简单的公式，画一下图就能推出来</span></span><br><span class="line">		vertical[fx] = vertical[y] + ver - vertical[x];</span><br><span class="line">		horisontal[fx] = horisontal[y] + hor - horisontal[x];</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">	cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">	<span class="built_in">init</span>();</span><br><span class="line">	<span class="keyword">char</span> s[<span class="number">10</span>];</span><br><span class="line">	<span class="keyword">int</span> tmp;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		cin &gt;&gt; info[i].a &gt;&gt; info[i].b;</span><br><span class="line">		cin &gt;&gt; tmp &gt;&gt; s;</span><br><span class="line">		<span class="keyword">if</span> (s[<span class="number">0</span>] == <span class="string">&#x27;N&#x27;</span>) &#123;</span><br><span class="line">			info[i].h = tmp;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (s[<span class="number">0</span>] == <span class="string">&#x27;S&#x27;</span>) &#123;</span><br><span class="line">			info[i].h = -tmp;<span class="comment">//规定好方向</span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (s[<span class="number">0</span>] == <span class="string">&#x27;E&#x27;</span>) &#123;</span><br><span class="line">			info[i].v = tmp;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			info[i].v = -tmp;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">	cin &gt;&gt; k;</span><br><span class="line">	<span class="keyword">int</span> now = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">while</span> (k--) &#123;</span><br><span class="line">		<span class="keyword">int</span> a, b, c;</span><br><span class="line">		cin &gt;&gt; a &gt;&gt; b &gt;&gt; c;</span><br><span class="line">		<span class="keyword">for</span> (; now &lt;= c; now++) &#123;<span class="comment">//由于index非递减才有这个for循环</span></span><br><span class="line">			<span class="built_in">merge</span>(info[now].a, info[now].b, info[now].v, info[now].h);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">Find</span>(a) != <span class="built_in">Find</span>(b)) &#123;</span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;-1&quot;</span> &lt;&lt; endl;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			cout &lt;&lt; <span class="built_in">abs</span>(vertical[a] - vertical[b]) + <span class="built_in">abs</span>(horisontal[a] - horisontal[b]) &lt;&lt; endl;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>acm学习</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2021/07/18/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
</search>
