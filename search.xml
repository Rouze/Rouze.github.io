<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2021/07/18/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>Kuangbin-简单搜索</title>
    <url>/2021/07/20/Kuangbin-%E7%AE%80%E5%8D%95%E6%90%9C%E7%B4%A2/</url>
    <content><![CDATA[<h1 id="简单搜索"><a href="#简单搜索" class="headerlink" title="简单搜索"></a>简单搜索</h1><h2 id="POJ3278-3278-–-Catch-That-Cow-poj-org"><a href="#POJ3278-3278-–-Catch-That-Cow-poj-org" class="headerlink" title="[POJ3278](3278 – Catch That Cow (poj.org))"></a>[POJ3278](<a href="http://poj.org/problem?id=3278">3278 – Catch That Cow (poj.org)</a>)</h2><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>该题注意剪枝，不让会RE（虽然我用的map），剪枝不可将x+1&gt;K和x*2&gt;k的情况剪掉，例如100-&gt;199</p>
<p>另外由于时间卡得比较紧，数量比较大所以不能用map，用map会TE</p>
<h2 id="poj3279"><a href="#poj3279" class="headerlink" title="poj3279"></a><a href="http://poj.org/problem?id=3279">poj3279</a></h2><p>题意大概说的是给定一个m*n的01矩阵，每次去翻一个位置周围四个方向的位置都会翻转，问能不能翻到全是0，能的话输出字典序最小的翻法</p>
<h3 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a>题解</h3><p>这是遇到的第一个枚举题，二进制枚举，首先确定的是每个位置只有翻和不翻两种情况，翻两次等于没翻，翻奇数次等于一次。如果去考察每一个位置的翻的情况就会有2^mn^次结果，显然时间超限，观察（看博客）易得出规律——==假设第一行的状态确定（就是第一行哪些位置翻不翻确定，确定之后会得到第一行确定的状态，哪些位置是0哪些是1），从第二行开始扫描，如果发现该位置上头上的位置为1那该位置一定要翻，因为头上的位置上左右都确定了==，以此扫描完整个数组，最后再对最后一行做一个检查，如果有1则不行，因为现在只能由下一行来翻转该位置，但没有下一行。</p>
<blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">int</span> maze[maxn][maxn];</span><br><span class="line"><span class="keyword">int</span> grid[maxn][maxn];</span><br><span class="line"><span class="keyword">int</span> ans[maxn][maxn];</span><br><span class="line"><span class="keyword">int</span> dir[<span class="number">5</span>][<span class="number">2</span>] = &#123; &#123;<span class="number">0</span>,<span class="number">0</span>&#125;,&#123;<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,<span class="number">1</span>&#125;,&#123;<span class="number">-1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,<span class="number">-1</span>&#125; &#125;;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">legal</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> (x &gt;= <span class="number">0</span> &amp;&amp; x &lt; n&amp;&amp; y &gt;= <span class="number">0</span> &amp;&amp; y &lt; m);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">flip</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">	ans[x][y] = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">int</span> nx, ny;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">		nx = x + dir[i][<span class="number">0</span>];</span><br><span class="line">		ny = y + dir[i][<span class="number">1</span>];</span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">legal</span>(nx, ny)) &#123;</span><br><span class="line">			grid[nx][ny] ^= <span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; j++) &#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%d%c&quot;</span>, ans[i][j], <span class="string">&quot; \n&quot;</span>[j == (m - <span class="number">1</span>)]);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; j++) &#123;</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;maze[i][j]);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">int</span> end = <span class="number">1</span> &lt;&lt; m;</span><br><span class="line">	<span class="keyword">int</span> bsk;</span><br><span class="line">	<span class="keyword">bool</span> ok = <span class="literal">true</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; end; i++) &#123;</span><br><span class="line">		ok = <span class="literal">true</span>;</span><br><span class="line">		bsk = i;</span><br><span class="line">		<span class="built_in">memcpy</span>(grid, maze, <span class="built_in"><span class="keyword">sizeof</span></span>(maze));</span><br><span class="line">		<span class="built_in">memset</span>(ans, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(ans));</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; m; k++) &#123;</span><br><span class="line">			<span class="keyword">if</span> (bsk &amp; <span class="number">1</span>)</span><br><span class="line">				<span class="built_in">flip</span>(<span class="number">0</span>, k);</span><br><span class="line">			bsk &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; n; j++) &#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; m; k++) &#123;</span><br><span class="line">				<span class="keyword">if</span> (grid[j - <span class="number">1</span>][k])</span><br><span class="line">					<span class="built_in">flip</span>(j, k);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>, j = n - <span class="number">1</span>; k &lt; m; k++) &#123;</span><br><span class="line">			<span class="keyword">if</span> (grid[j][k]) &#123;</span><br><span class="line">				ok = <span class="literal">false</span>;</span><br><span class="line">				<span class="keyword">continue</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (ok) &#123;</span><br><span class="line">			<span class="built_in">solve</span>();</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (!ok)</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;IMPOSSIBLE\n&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</blockquote>
<h2 id="POJ1426-–-Find-The-Multiple"><a href="#POJ1426-–-Find-The-Multiple" class="headerlink" title="POJ1426 – Find The Multiple "></a><a href="http://poj.org/problem?id=1426">POJ1426 – Find The Multiple </a></h2><p>题意大概是给一个数字n,找出一个n的十进制倍数m，m只能由01组成</p>
<h3 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a>题解</h3><p>虽然这道题说m不超过100位，但用unsigned long long过了，要是完全按照题意的话就还要处理大数问题，看其它文章好像也没有很好的可以解决，就直接当unsigned long long 过了</p>
<p>bfs和dfs都可以，dfs注意判断不要溢出,当然由于n比较小可以先得出200个结果打表然后再过，因为可能搜索会超时，时间卡得较紧</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bfs</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	queue&lt;ull&gt; que;</span><br><span class="line">	que.<span class="built_in">push</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span> (!que.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">		ull tmp = que.<span class="built_in">front</span>();</span><br><span class="line">		que.<span class="built_in">pop</span>();</span><br><span class="line">		<span class="keyword">if</span> (tmp % n == <span class="number">0</span>) &#123;</span><br><span class="line">			cout &lt;&lt; tmp &lt;&lt; endl;</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		que.<span class="built_in">push</span>(tmp * <span class="number">10</span>);</span><br><span class="line">		que.<span class="built_in">push</span>(tmp * <span class="number">10</span> + <span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">while</span> (cin &gt;&gt; n&amp;&amp;n) &#123;</span><br><span class="line">		<span class="built_in">bfs</span>();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="hdu2612"><a href="#hdu2612" class="headerlink" title="hdu2612"></a><a href="https://acm.dingbacode.com/showproblem.php?pid=2612">hdu2612</a></h2><p>题意为求两个人要到同一个@需要的最少步数乘以11.</p>
<h3 id="题解-3"><a href="#题解-3" class="headerlink" title="题解"></a>题解</h3><p>两边bfs之后将每次每一个@的步数相加，最后找出最小的那个@即可，但是要注意可能有些@是两个人都到不了的，其步数一直为0所以最后需要特殊判断一下，我legal判断x&lt;n写成x&lt;m了，RE了好几发━┳━　━┳━</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">vector&lt;string&gt; maze;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">	<span class="keyword">int</span> x, y, v;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> _x, <span class="keyword">int</span> _y)</span> </span>&#123;</span><br><span class="line">		x = _x;</span><br><span class="line">		y = _y;</span><br><span class="line">		v = <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">node</span>(<span class="keyword">int</span> _x, <span class="keyword">int</span> _y) &#123;</span><br><span class="line">		x = _x;</span><br><span class="line">		y = _y;</span><br><span class="line">		v = <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">node</span>() &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line">vector&lt;node&gt; End;</span><br><span class="line">node yifenfi, mercki;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">int</span> dir[<span class="number">4</span>][<span class="number">2</span>] = &#123; &#123;<span class="number">-1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,<span class="number">-1</span>&#125;,&#123;<span class="number">0</span>,<span class="number">1</span>&#125; &#125;;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">legal</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, vector&lt;string&gt;&amp; grid)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> (x &gt;= <span class="number">0</span> &amp;&amp; x &lt; n&amp;&amp; y &gt;= <span class="number">0</span> &amp;&amp; y &lt; m&amp;&amp; grid[x][y] != <span class="string">&#x27;#&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bfs</span><span class="params">(node&amp; start)</span> </span>&#123;</span><br><span class="line">	<span class="function">vector&lt;string&gt; <span class="title">grid</span><span class="params">(maze.begin(), maze.end())</span></span>;</span><br><span class="line">	<span class="keyword">int</span> step[<span class="number">205</span>][<span class="number">205</span>];</span><br><span class="line">	<span class="built_in">memset</span>(step, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(step));</span><br><span class="line">	queue&lt;node&gt; que;</span><br><span class="line">	grid[start.x][start.y] = <span class="string">&#x27;#&#x27;</span>;</span><br><span class="line">	que.<span class="built_in">push</span>(start);</span><br><span class="line">	<span class="keyword">while</span> (!que.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">		node tmp = que.<span class="built_in">front</span>();</span><br><span class="line">		que.<span class="built_in">pop</span>();</span><br><span class="line">		<span class="keyword">int</span> nx, ny;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">			nx = tmp.x + dir[i][<span class="number">0</span>];</span><br><span class="line">			ny = tmp.y + dir[i][<span class="number">1</span>];</span><br><span class="line">			<span class="keyword">if</span> (<span class="built_in">legal</span>(nx, ny, grid)) &#123;</span><br><span class="line">				step[nx][ny] = step[tmp.x][tmp.y] + <span class="number">1</span>;</span><br><span class="line">				grid[nx][ny] = <span class="string">&#x27;#&#x27;</span>;</span><br><span class="line">				que.<span class="built_in">push</span>(<span class="built_in">node</span>(nx, ny));</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">auto</span>&amp; i : End) &#123;</span><br><span class="line">		i.v += step[i.x][i.y];</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span> (cin &gt;&gt; n &gt;&gt; m&amp;&amp;n&gt;=<span class="number">2</span>&amp;&amp;m&gt;=<span class="number">2</span>) &#123;</span><br><span class="line">		string s;</span><br><span class="line">		maze.<span class="built_in">clear</span>();</span><br><span class="line">		End.<span class="built_in">clear</span>();</span><br><span class="line">		yifenfi.x = yifenfi.y = <span class="number">0</span>;</span><br><span class="line">		mercki.x = mercki.y = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">			cin &gt;&gt; s;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; j++) &#123;</span><br><span class="line">				<span class="keyword">if</span> (s[j] == <span class="string">&#x27;@&#x27;</span>) &#123;</span><br><span class="line">					End.<span class="built_in">push_back</span>(<span class="built_in">node</span>(i, j));</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">else</span> <span class="keyword">if</span> (s[j] == <span class="string">&#x27;Y&#x27;</span>) &#123;</span><br><span class="line">					yifenfi.<span class="built_in">init</span>(i, j);</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">else</span> <span class="keyword">if</span> (s[j] == <span class="string">&#x27;M&#x27;</span>)</span><br><span class="line">					mercki.<span class="built_in">init</span>(i, j);</span><br><span class="line">			&#125;</span><br><span class="line">			maze.<span class="built_in">push_back</span>(s);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">bfs</span>(yifenfi);</span><br><span class="line">		<span class="built_in">bfs</span>(mercki);</span><br><span class="line">		<span class="keyword">int</span> Min = <span class="number">10000</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">auto</span> i : End) &#123;</span><br><span class="line">			<span class="keyword">if</span> (Min &gt; i.v&amp;&amp;i.v!=<span class="number">0</span>) &#123;</span><br><span class="line">				Min = i.v;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		cout &lt;&lt; Min * <span class="number">11</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="hdu1401"><a href="#hdu1401" class="headerlink" title="hdu1401 "></a><a href="https://acm.dingbacode.com/showproblem.php?pid=1401">hdu1401 </a></h2><p>题意为给定一个8 $\times$ 8的棋盘，给定四个棋子的起始坐标和终止坐标，问是否能在8步以内从起始状态到终点状态</p>
<h3 id="题解-4"><a href="#题解-4" class="headerlink" title="题解"></a>题解</h3><p>第一道双向广搜题，棋盘布局问题的一个重点是怎么查重，这就需要将每一步之后的棋盘状态给表示出来，这道题给的是一个8 $\times$ 8的棋盘，一共64个位置，因此整个棋盘的状态可以用一个long long数据来存储，64个bit位上分别可以对应棋盘上一个点是否摆放了棋子，再者还需要存储该状态是第几步得到，为了方便快速取出棋子，需要一个二维数组来存放四颗棋子的状态。中间再使用map来标记哪些状态已经到达，该map能记录每个状态需要多少步到达。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">maze</span> &#123;</span></span><br><span class="line">	<span class="keyword">int</span> chess[<span class="number">4</span>][<span class="number">2</span>];<span class="comment">//棋子状态</span></span><br><span class="line">	ull hash;<span class="comment">//每个状态独有的hash值</span></span><br><span class="line">	<span class="keyword">bool</span> grid[<span class="number">8</span>][<span class="number">8</span>];<span class="comment">//棋盘状态</span></span><br><span class="line">&#125;Front, Tail;<span class="comment">//定义开始棋盘与终点棋盘</span></span><br><span class="line"><span class="keyword">int</span> dir1[<span class="number">4</span>][<span class="number">2</span>] = &#123; &#123;<span class="number">-1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,<span class="number">1</span>&#125;,&#123;<span class="number">0</span>,<span class="number">-1</span>&#125; &#125;;</span><br><span class="line"><span class="keyword">int</span> dir2[<span class="number">4</span>][<span class="number">2</span>] = &#123; &#123;<span class="number">-2</span>,<span class="number">0</span>&#125;,&#123;<span class="number">2</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,<span class="number">2</span>&#125;,&#123;<span class="number">0</span>,<span class="number">-2</span>&#125; &#125;;<span class="comment">//遇到旁边有棋子的移动步数</span></span><br><span class="line"></span><br><span class="line"><span class="function">ull <span class="title">ToHash</span><span class="params">(maze&amp; m)</span> </span>&#123;</span><br><span class="line">	ull re = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//将棋盘上每一个点的状态对应到long long 上每一个位</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">8</span>; j++) &#123;</span><br><span class="line">			re = re &lt;&lt; <span class="number">1</span> | m.grid[i][j];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> re;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">solve</span><span class="params">(queue&lt;maze&gt;&amp; que, unordered_map&lt;ull, <span class="keyword">int</span>&gt;&amp; mp1, unordered_map&lt;ull, <span class="keyword">int</span>&gt;&amp; mp2)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//该函数相当于while循环当中的一次que.front()...que.push()...</span></span><br><span class="line">	maze tmp = que.<span class="built_in">front</span>();</span><br><span class="line">	que.<span class="built_in">pop</span>();</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">        <span class="comment">//第一重遍历，遍历四颗棋子</span></span><br><span class="line">		<span class="keyword">int</span> x = tmp.chess[i][<span class="number">0</span>], y = tmp.chess[i][<span class="number">1</span>];</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++) &#123;</span><br><span class="line">            <span class="comment">//第二重遍历，遍历四个方向</span></span><br><span class="line">			<span class="keyword">int</span> nx = x + dir1[j][<span class="number">0</span>];</span><br><span class="line">			<span class="keyword">int</span> ny = y + dir1[j][<span class="number">1</span>];</span><br><span class="line">			<span class="keyword">if</span> (nx &gt;= <span class="number">0</span> &amp;&amp; nx &lt; <span class="number">8</span> &amp;&amp; ny &gt;= <span class="number">0</span> &amp;&amp; ny &lt; <span class="number">8</span> &amp;&amp; tmp.grid[nx][ny] == <span class="literal">false</span>) &#123;<span class="comment">//先尝试移动一步</span></span><br><span class="line">				maze next = tmp;</span><br><span class="line">				next.grid[nx][ny] = <span class="literal">true</span>;</span><br><span class="line">				next.grid[x][y] = <span class="literal">false</span>;<span class="comment">//下一个状态里面,(x,y)已经变成了false，不用担心走回头路，因为当前棋盘的hash已经记录在map里面了</span></span><br><span class="line">				next.hash = <span class="built_in">ToHash</span>(next);</span><br><span class="line">				next.chess[i][<span class="number">0</span>] = nx, next.chess[i][<span class="number">1</span>] = ny;</span><br><span class="line">				<span class="keyword">if</span> (!mp1.<span class="built_in">count</span>(next.hash)) &#123;<span class="comment">//如果变化后是以前没有的状态</span></span><br><span class="line">					mp1[next.hash] = mp1[tmp.hash] + <span class="number">1</span>;</span><br><span class="line">					que.<span class="built_in">push</span>(next);</span><br><span class="line">					<span class="keyword">if</span> (mp2.<span class="built_in">count</span>(next.hash))<span class="comment">//如果变化后与终点变过来的某一状态相同，则已经找到答案</span></span><br><span class="line">						<span class="keyword">return</span> mp1[next.hash] + mp2[next.hash];</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">if</span> (nx &gt;= <span class="number">0</span> &amp;&amp; nx &lt; <span class="number">8</span> &amp;&amp; ny &gt;= <span class="number">0</span> &amp;&amp; ny &lt; <span class="number">8</span> &amp;&amp; tmp.grid[nx][ny] == <span class="literal">true</span>) &#123;<span class="comment">//走一步遇到了棋子</span></span><br><span class="line">				 nx = x + dir2[j][<span class="number">0</span>];</span><br><span class="line">				 ny = y + dir2[j][<span class="number">1</span>];</span><br><span class="line">				 <span class="keyword">if</span> (nx &gt;= <span class="number">0</span> &amp;&amp; nx &lt; <span class="number">8</span> &amp;&amp; ny &gt;= <span class="number">0</span> &amp;&amp; ny &lt; <span class="number">8</span> &amp;&amp; tmp.grid[nx][ny] == <span class="literal">false</span>) &#123;<span class="comment">//尝试走两步，后面代码同上</span></span><br><span class="line">					 maze next = tmp;</span><br><span class="line">					 next.grid[nx][ny] = <span class="literal">true</span>;</span><br><span class="line">					 next.grid[x][y] = <span class="literal">false</span>;</span><br><span class="line">					 next.hash = <span class="built_in">ToHash</span>(next);</span><br><span class="line">					 next.chess[i][<span class="number">0</span>] = nx, next.chess[i][<span class="number">1</span>] = ny;</span><br><span class="line">					 <span class="keyword">if</span> (!mp1.<span class="built_in">count</span>(next.hash)) &#123;</span><br><span class="line">						 mp1[next.hash] = mp1[tmp.hash] + <span class="number">1</span>;</span><br><span class="line">						 que.<span class="built_in">push</span>(next);</span><br><span class="line">						 <span class="keyword">if</span> (mp2.<span class="built_in">count</span>(next.hash))</span><br><span class="line">							 <span class="keyword">return</span> mp1[next.hash] + mp2[next.hash];</span><br><span class="line">					 &#125;</span><br><span class="line">				 &#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">-1</span>;<span class="comment">//四颗棋子遍历完发现都没有return，返回失败标记</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bfs</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	queue&lt;maze&gt; que1, que2;</span><br><span class="line">	que1.<span class="built_in">push</span>(Front);</span><br><span class="line">	que2.<span class="built_in">push</span>(Tail);</span><br><span class="line">	unordered_map&lt;ull, <span class="keyword">int</span>&gt; mp1, mp2;</span><br><span class="line">	mp1[Front.hash] = <span class="number">0</span>;</span><br><span class="line">	mp2[Tail.hash] = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//两个队列与map的初始化，que1代表从起始状态遍历，que2从终止状态开始，mp1和mp2分别对应两者出现过的状态</span></span><br><span class="line">	<span class="keyword">while</span> (que1.<span class="built_in">size</span>() &amp;&amp; que2.<span class="built_in">size</span>()) &#123;</span><br><span class="line">		<span class="keyword">if</span> (mp1[Front.hash] + mp2[Tail.hash] &gt; <span class="number">8</span>)<span class="comment">//如果两者的步数和已经超过8，返回失败</span></span><br><span class="line">			<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">		<span class="keyword">int</span> re;</span><br><span class="line">		<span class="keyword">if</span> (que1.<span class="built_in">size</span>() &lt;= que2.<span class="built_in">size</span>()) &#123;<span class="comment">//size小的优先，这样就能达到双端遍历的效果</span></span><br><span class="line">			re = <span class="built_in">solve</span>(que1, mp1, mp2);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			re = <span class="built_in">solve</span>(que2, mp2, mp1);</span><br><span class="line">		<span class="keyword">if</span> (re != <span class="number">-1</span> &amp;&amp; re &lt;= <span class="number">8</span>)</span><br><span class="line">			<span class="keyword">return</span> re;</span><br><span class="line">		<span class="keyword">if</span> (re &gt; <span class="number">8</span>)</span><br><span class="line">			<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> x, y;</span><br><span class="line">	<span class="keyword">while</span> (cin &gt;&gt; x &gt;&gt; y) &#123;</span><br><span class="line">		x--, y--;</span><br><span class="line">		<span class="built_in">memset</span>(Front.grid, <span class="literal">false</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(Front.grid));</span><br><span class="line">		<span class="built_in">memset</span>(Tail.grid, <span class="literal">false</span> , <span class="built_in"><span class="keyword">sizeof</span></span>(Tail.grid));</span><br><span class="line">		Front.grid[x][y] = <span class="literal">true</span>;</span><br><span class="line">		Front.chess[<span class="number">0</span>][<span class="number">0</span>] = x, Front.chess[<span class="number">0</span>][<span class="number">1</span>] = y;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">3</span>; i++) &#123;</span><br><span class="line">			cin &gt;&gt; x &gt;&gt; y;</span><br><span class="line">			x--, y--;</span><br><span class="line">			Front.grid[x][y] = <span class="literal">true</span>;</span><br><span class="line">			Front.chess[i][<span class="number">0</span>] = x, Front.chess[i][<span class="number">1</span>] = y;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">			cin &gt;&gt; x &gt;&gt; y;</span><br><span class="line">			x--, y--;</span><br><span class="line">			Tail.grid[x][y] = <span class="literal">true</span>;</span><br><span class="line">			Tail.chess[i][<span class="number">0</span>] = x, Tail.chess[i][<span class="number">1</span>] = y;</span><br><span class="line">		&#125;</span><br><span class="line">		Front.hash = <span class="built_in">ToHash</span>(Front);</span><br><span class="line">		Tail.hash = <span class="built_in">ToHash</span>(Tail);</span><br><span class="line">		<span class="keyword">if</span> (Front.hash == Tail.hash)</span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;YES&quot;</span> &lt;&lt; endl;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="keyword">int</span> re = <span class="built_in">bfs</span>();</span><br><span class="line">			<span class="keyword">if</span> (re == <span class="number">-1</span>)</span><br><span class="line">				cout &lt;&lt; <span class="string">&quot;NO&quot;</span> &lt;&lt; endl;</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">				cout &lt;&lt; <span class="string">&quot;YES&quot;</span> &lt;&lt; endl;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="hdu1495"><a href="#hdu1495" class="headerlink" title="hdu1495 "></a><a href="https://acm.dingbacode.com/showproblem.php?pid=1495">hdu1495 </a></h2><p>题意是给定三个杯子，第一个被子装满水，通过这三个被子互相倒进倒出能否把水平分</p>
<h3 id="题解-5"><a href="#题解-5" class="headerlink" title="题解"></a>题解</h3><p>题目的要求是出现一个杯子为空，其它两个杯子装等量的水的情况（我第一次理解成了只要可以两个人喝到相同的水就行了，于是一边倒水一边喝，wa了老久━┳━　━┳━)。搜索的重点就是去记录状态，这道题将三个杯子当前的装水量为一个状态进行搜索，所以开一个三维的vis[s的水量][n的水量][m的水量]bool数组来记录当前状态，每一个状态有6个方向分别是s-&gt;n,s-&gt;m,n-&gt;s,n-&gt;m,m-&gt;s,m-&gt;n(看起来代码长其实很多都是重复操作)</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 105</span></span><br><span class="line"><span class="keyword">bool</span> vis[MAXN][MAXN][MAXN];</span><br><span class="line"><span class="keyword">int</span> s, n, m;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">	<span class="keyword">int</span> s, n, m, step;</span><br><span class="line">&#125;;</span><br><span class="line">node start;</span><br><span class="line">node re;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bfs</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	queue&lt;node&gt; que;</span><br><span class="line">	<span class="built_in">memset</span>(vis, <span class="literal">false</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(vis));</span><br><span class="line">	vis[start.s][start.n][start.m] = <span class="literal">true</span>;</span><br><span class="line">	que.<span class="built_in">push</span>(start);</span><br><span class="line">	<span class="keyword">while</span> (!que.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">		node tmp = que.<span class="built_in">front</span>();</span><br><span class="line">		que.<span class="built_in">pop</span>();</span><br><span class="line">		<span class="keyword">if</span> (tmp.s == <span class="number">0</span> &amp;&amp; tmp.m == tmp.n || tmp.m == <span class="number">0</span> &amp;&amp; tmp.s == tmp.n || tmp.n == <span class="number">0</span> &amp;&amp; tmp.s == tmp.m)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">return</span> tmp.step;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//s--&gt;n</span></span><br><span class="line">	</span><br><span class="line">		<span class="keyword">if</span> (tmp.s &amp;&amp; n &gt; tmp.n) &#123;<span class="comment">//s有水并且n还没灌满</span></span><br><span class="line">			node x = tmp;</span><br><span class="line">			<span class="keyword">if</span> (tmp.s &gt; n - tmp.n) &#123;<span class="comment">//s的水比n现在能装的还多</span></span><br><span class="line">				x.s -= n - tmp.n;</span><br><span class="line">				x.n = n;</span><br><span class="line">				x.step += <span class="number">1</span>;</span><br><span class="line">				<span class="keyword">if</span> (!vis[x.s][x.n][x.m]) &#123;</span><br><span class="line">					que.<span class="built_in">push</span>(x);</span><br><span class="line">					vis[x.s][x.n][x.m] = <span class="literal">true</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> &#123;</span><br><span class="line">				x.s = <span class="number">0</span>;</span><br><span class="line">				x.n += tmp.s;</span><br><span class="line">				x.step += <span class="number">1</span>;</span><br><span class="line">				<span class="keyword">if</span> (!vis[x.s][x.n][x.m]) &#123;</span><br><span class="line">					que.<span class="built_in">push</span>(x);</span><br><span class="line">					vis[x.s][x.n][x.m] = <span class="literal">true</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//s--&gt;m</span></span><br><span class="line">		<span class="keyword">if</span> (tmp.s &amp;&amp; m &gt; tmp.m) &#123;<span class="comment">//s有水并且m还没灌满</span></span><br><span class="line">			node x = tmp;</span><br><span class="line">			<span class="keyword">if</span> (tmp.s &gt; m - tmp.m) &#123;<span class="comment">//s的水比m现在能装的还多</span></span><br><span class="line">				x.s -= m - tmp.m;</span><br><span class="line">				x.m = m;</span><br><span class="line">				x.step += <span class="number">1</span>;</span><br><span class="line">				<span class="keyword">if</span> (!vis[x.s][x.n][x.m]) &#123;</span><br><span class="line">					que.<span class="built_in">push</span>(x);</span><br><span class="line">					vis[x.s][x.n][x.m] = <span class="literal">true</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> &#123;</span><br><span class="line">				x.s = <span class="number">0</span>;</span><br><span class="line">				x.m += tmp.s;</span><br><span class="line">				x.step += <span class="number">1</span>;</span><br><span class="line">				<span class="keyword">if</span> (!vis[x.s][x.n][x.m]) &#123;</span><br><span class="line">					que.<span class="built_in">push</span>(x);</span><br><span class="line">					vis[x.s][x.n][x.m] = <span class="literal">true</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//n--&gt;s</span></span><br><span class="line">		<span class="keyword">if</span> (tmp.n &amp;&amp; s &gt; tmp.s) &#123;<span class="comment">//n有水并且s还没灌满</span></span><br><span class="line">			node x = tmp;</span><br><span class="line">			<span class="keyword">if</span> (tmp.n &gt; s - tmp.s) &#123;<span class="comment">//n的水比s现在能装的还多</span></span><br><span class="line">				x.n -= s - tmp.s;</span><br><span class="line">				x.s = s;</span><br><span class="line">				x.step += <span class="number">1</span>;</span><br><span class="line">				<span class="keyword">if</span> (!vis[x.s][x.n][x.m]) &#123;</span><br><span class="line">					que.<span class="built_in">push</span>(x);</span><br><span class="line">					vis[x.s][x.n][x.m] = <span class="literal">true</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> &#123;</span><br><span class="line">				x.n = <span class="number">0</span>;</span><br><span class="line">				x.s += tmp.n;</span><br><span class="line">				x.step += <span class="number">1</span>;</span><br><span class="line">				<span class="keyword">if</span> (!vis[x.s][x.n][x.m]) &#123;</span><br><span class="line">					que.<span class="built_in">push</span>(x);</span><br><span class="line">					vis[x.s][x.n][x.m] = <span class="literal">true</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//n--&gt;m</span></span><br><span class="line">		<span class="keyword">if</span> (tmp.n &amp;&amp; m &gt; tmp.m) &#123;<span class="comment">//n有水并且m还没灌满</span></span><br><span class="line">			node x = tmp;</span><br><span class="line">			<span class="keyword">if</span> (tmp.n &gt; m - tmp.m) &#123;<span class="comment">//n的水比m现在能装的还多</span></span><br><span class="line">				x.n -= m - tmp.m;</span><br><span class="line">				x.m = m;</span><br><span class="line">				x.step += <span class="number">1</span>;</span><br><span class="line">				<span class="keyword">if</span> (!vis[x.s][x.n][x.m]) &#123;</span><br><span class="line">					que.<span class="built_in">push</span>(x);</span><br><span class="line">					vis[x.s][x.n][x.m] = <span class="literal">true</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> &#123;</span><br><span class="line">				x.n = <span class="number">0</span>;</span><br><span class="line">				x.m += tmp.n;</span><br><span class="line">				x.step += <span class="number">1</span>;</span><br><span class="line">				<span class="keyword">if</span> (!vis[x.s][x.n][x.m]) &#123;</span><br><span class="line">					que.<span class="built_in">push</span>(x);</span><br><span class="line">					vis[x.s][x.n][x.m] = <span class="literal">true</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//m--&gt;n</span></span><br><span class="line">		<span class="keyword">if</span> (tmp.m &amp;&amp; n &gt; tmp.n) &#123;<span class="comment">//n有水并且n还没灌满</span></span><br><span class="line">			node x = tmp;</span><br><span class="line">			<span class="keyword">if</span> (tmp.m &gt; n - tmp.n) &#123;<span class="comment">//m的水比n现在能装的还多</span></span><br><span class="line">				x.m -= n - tmp.n;</span><br><span class="line">				x.n = n;</span><br><span class="line">				x.step += <span class="number">1</span>;</span><br><span class="line">				<span class="keyword">if</span> (!vis[x.s][x.n][x.m]) &#123;</span><br><span class="line">					que.<span class="built_in">push</span>(x);</span><br><span class="line">					vis[x.s][x.n][x.m] = <span class="literal">true</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> &#123;</span><br><span class="line">				x.m = <span class="number">0</span>;</span><br><span class="line">				x.n += tmp.m;</span><br><span class="line">				x.step += <span class="number">1</span>;</span><br><span class="line">				<span class="keyword">if</span> (!vis[x.s][x.n][x.m]) &#123;</span><br><span class="line">					que.<span class="built_in">push</span>(x);</span><br><span class="line">					vis[x.s][x.n][x.m] = <span class="literal">true</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//m--&gt;s</span></span><br><span class="line">		<span class="keyword">if</span> (tmp.m &amp;&amp; s &gt; tmp.s) &#123;<span class="comment">//m有水并且s还没灌满</span></span><br><span class="line">			node x = tmp;</span><br><span class="line">			<span class="keyword">if</span> (tmp.m &gt; s - tmp.s) &#123;<span class="comment">//m的水比s现在能装的还多</span></span><br><span class="line">				x.m -= s - tmp.s;</span><br><span class="line">				x.s = s;</span><br><span class="line">				x.step += <span class="number">1</span>;</span><br><span class="line">				<span class="keyword">if</span> (!vis[x.s][x.n][x.m]) &#123;</span><br><span class="line">					que.<span class="built_in">push</span>(x);</span><br><span class="line">					vis[x.s][x.n][x.m] = <span class="literal">true</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> &#123;</span><br><span class="line">				x.m = <span class="number">0</span>;</span><br><span class="line">				x.s += tmp.m;</span><br><span class="line">				x.step += <span class="number">1</span>;</span><br><span class="line">				<span class="keyword">if</span> (!vis[x.s][x.n][x.m]) &#123;</span><br><span class="line">					que.<span class="built_in">push</span>(x);</span><br><span class="line">					vis[x.s][x.n][x.m] = <span class="literal">true</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">while</span> (cin &gt;&gt; s &gt;&gt; n &gt;&gt; m) &#123;</span><br><span class="line">		<span class="keyword">if</span> (s == n &amp;&amp; n == m &amp;&amp; s == <span class="number">0</span>)</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		start.s = s, start.n = <span class="number">0</span>, start.m = <span class="number">0</span>;</span><br><span class="line">		start.step = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">if</span> (s &amp; <span class="number">1</span>) &#123;</span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;NO&quot;</span> &lt;&lt; endl;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="keyword">int</span> re = <span class="built_in">bfs</span>();</span><br><span class="line">			<span class="keyword">if</span> (re) &#123;</span><br><span class="line">				cout &lt;&lt; re &lt;&lt; endl;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">				cout &lt;&lt; <span class="string">&quot;NO&quot;</span> &lt;&lt; endl;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a href="http://poj.org/problem?id=3126">POJ3126 – Prime Path</a></p>
<p><em>2021.7.19</em></p>
<p>题意是给定一个起始的四位的素数和目标四位的素数，每一步可以变动一个位置上的数字，要求变动之后数字还是素数，且还是要四位数，求最少步数。</p>
<h3 id="题解-6"><a href="#题解-6" class="headerlink" title="题解"></a>题解</h3><p>最近做这个专题发现基本上都是问最少步数，也基本上都是bfs,这道题的状态可以直接由一个数字本身确定，由于范围较小，可以提前将所有的四位素数计算出来，方便后面判断。代码如下</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">bool</span> prime[<span class="number">100000</span>];<span class="comment">//判断素数</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; <span class="number">100000</span>; i++) &#123;</span><br><span class="line">		<span class="keyword">if</span> (!prime[i]) &#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">2</span>; j * i &lt; <span class="number">100000</span>; j++) &#123;</span><br><span class="line">				prime[i * j] = <span class="literal">true</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;<span class="comment">//埃氏筛</span></span><br><span class="line">    </span><br><span class="line">	<span class="keyword">int</span> t, a, b;</span><br><span class="line">	cin &gt;&gt; t;</span><br><span class="line">	<span class="keyword">bool</span> flag = <span class="literal">false</span>;</span><br><span class="line">	<span class="keyword">while</span> (t--) &#123;</span><br><span class="line">		cin &gt;&gt; a &gt;&gt; b;</span><br><span class="line">		queue&lt;<span class="keyword">int</span>&gt;que;</span><br><span class="line">		map&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; mp;<span class="comment">//bfs的标记数组，mp[1000]=1表示1000y</span></span><br><span class="line">		mp[a] = <span class="number">0</span>;</span><br><span class="line">		que.<span class="built_in">push</span>(a);</span><br><span class="line">		<span class="keyword">while</span> (!que.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">			<span class="keyword">int</span> tmp = que.<span class="built_in">front</span>();</span><br><span class="line">			que.<span class="built_in">pop</span>();</span><br><span class="line">			<span class="keyword">if</span> (tmp == b) &#123;</span><br><span class="line">				flag = <span class="literal">true</span>;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">            <span class="comment">//下面四个for循环分别对应修改四个位置上的数字</span></span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">				<span class="keyword">int</span> num = tmp % <span class="number">1000</span> + i * <span class="number">1000</span>;</span><br><span class="line">				<span class="keyword">if</span> (!prime[num] &amp;&amp; mp.<span class="built_in">count</span>(num) == <span class="number">0</span>&amp;&amp;num&gt;<span class="number">1000</span>) &#123;</span><br><span class="line">					mp[num] = mp[tmp] + <span class="number">1</span>;</span><br><span class="line">					que.<span class="built_in">push</span>(num);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">				<span class="keyword">int</span> num = tmp - ((tmp / <span class="number">100</span>) % <span class="number">10</span>) * <span class="number">100</span> + i * <span class="number">100</span>;</span><br><span class="line">				<span class="keyword">if</span> (!prime[num] &amp;&amp; mp.<span class="built_in">count</span>(num) == <span class="number">0</span>&amp;&amp;num&gt;<span class="number">1000</span>) &#123;</span><br><span class="line">					mp[num] = mp[tmp] + <span class="number">1</span>;</span><br><span class="line">					que.<span class="built_in">push</span>(num);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">				<span class="keyword">int</span> num = tmp - ((tmp / <span class="number">10</span>) % <span class="number">10</span>) * <span class="number">10</span> + i * <span class="number">10</span>;</span><br><span class="line">				<span class="keyword">if</span> (!prime[num] &amp;&amp; mp.<span class="built_in">count</span>(num) == <span class="number">0</span>&amp;&amp;num&gt;<span class="number">1000</span>) &#123;</span><br><span class="line">					mp[num] = mp[tmp] + <span class="number">1</span>;</span><br><span class="line">					que.<span class="built_in">push</span>(num);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">				<span class="keyword">int</span> num = tmp -(tmp%<span class="number">10</span>) + i;</span><br><span class="line">				<span class="keyword">if</span> (!prime[num] &amp;&amp; mp.<span class="built_in">count</span>(num) == <span class="number">0</span>&amp;&amp;num&gt;<span class="number">1000</span>) &#123;</span><br><span class="line">					mp[num] = mp[tmp] + <span class="number">1</span>;</span><br><span class="line">					que.<span class="built_in">push</span>(num);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (flag)</span><br><span class="line">			cout &lt;&lt; mp[b]&lt;&lt;endl;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;impossible&quot;</span> &lt;&lt; endl;</span><br><span class="line">		</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>acm</tag>
      </tags>
  </entry>
</search>
